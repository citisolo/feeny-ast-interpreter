
cfeeny:     file format elf64-x86-64


Disassembly of section .init:

0000000000400838 <_init>:
  400838:	48 83 ec 08          	sub    $0x8,%rsp
  40083c:	48 8b 05 b5 57 20 00 	mov    0x2057b5(%rip),%rax        # 605ff8 <_DYNAMIC+0x1d0>
  400843:	48 85 c0             	test   %rax,%rax
  400846:	74 05                	je     40084d <_init+0x15>
  400848:	e8 03 01 00 00       	callq  400950 <__gmon_start__@plt>
  40084d:	48 83 c4 08          	add    $0x8,%rsp
  400851:	c3                   	retq   

Disassembly of section .plt:

0000000000400860 <free@plt-0x10>:
  400860:	ff 35 a2 57 20 00    	pushq  0x2057a2(%rip)        # 606008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400866:	ff 25 a4 57 20 00    	jmpq   *0x2057a4(%rip)        # 606010 <_GLOBAL_OFFSET_TABLE_+0x10>
  40086c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400870 <free@plt>:
  400870:	ff 25 a2 57 20 00    	jmpq   *0x2057a2(%rip)        # 606018 <_GLOBAL_OFFSET_TABLE_+0x18>
  400876:	68 00 00 00 00       	pushq  $0x0
  40087b:	e9 e0 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400880 <putchar@plt>:
  400880:	ff 25 9a 57 20 00    	jmpq   *0x20579a(%rip)        # 606020 <_GLOBAL_OFFSET_TABLE_+0x20>
  400886:	68 01 00 00 00       	pushq  $0x1
  40088b:	e9 d0 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400890 <backtrace_symbols_fd@plt>:
  400890:	ff 25 92 57 20 00    	jmpq   *0x205792(%rip)        # 606028 <_GLOBAL_OFFSET_TABLE_+0x28>
  400896:	68 02 00 00 00       	pushq  $0x2
  40089b:	e9 c0 ff ff ff       	jmpq   400860 <_init+0x28>

00000000004008a0 <puts@plt>:
  4008a0:	ff 25 8a 57 20 00    	jmpq   *0x20578a(%rip)        # 606030 <_GLOBAL_OFFSET_TABLE_+0x30>
  4008a6:	68 03 00 00 00       	pushq  $0x3
  4008ab:	e9 b0 ff ff ff       	jmpq   400860 <_init+0x28>

00000000004008b0 <fclose@plt>:
  4008b0:	ff 25 82 57 20 00    	jmpq   *0x205782(%rip)        # 606038 <_GLOBAL_OFFSET_TABLE_+0x38>
  4008b6:	68 04 00 00 00       	pushq  $0x4
  4008bb:	e9 a0 ff ff ff       	jmpq   400860 <_init+0x28>

00000000004008c0 <strlen@plt>:
  4008c0:	ff 25 7a 57 20 00    	jmpq   *0x20577a(%rip)        # 606040 <_GLOBAL_OFFSET_TABLE_+0x40>
  4008c6:	68 05 00 00 00       	pushq  $0x5
  4008cb:	e9 90 ff ff ff       	jmpq   400860 <_init+0x28>

00000000004008d0 <backtrace@plt>:
  4008d0:	ff 25 72 57 20 00    	jmpq   *0x205772(%rip)        # 606048 <_GLOBAL_OFFSET_TABLE_+0x48>
  4008d6:	68 06 00 00 00       	pushq  $0x6
  4008db:	e9 80 ff ff ff       	jmpq   400860 <_init+0x28>

00000000004008e0 <__stack_chk_fail@plt>:
  4008e0:	ff 25 6a 57 20 00    	jmpq   *0x20576a(%rip)        # 606050 <_GLOBAL_OFFSET_TABLE_+0x50>
  4008e6:	68 07 00 00 00       	pushq  $0x7
  4008eb:	e9 70 ff ff ff       	jmpq   400860 <_init+0x28>

00000000004008f0 <printf@plt>:
  4008f0:	ff 25 62 57 20 00    	jmpq   *0x205762(%rip)        # 606058 <_GLOBAL_OFFSET_TABLE_+0x58>
  4008f6:	68 08 00 00 00       	pushq  $0x8
  4008fb:	e9 60 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400900 <memset@plt>:
  400900:	ff 25 5a 57 20 00    	jmpq   *0x20575a(%rip)        # 606060 <_GLOBAL_OFFSET_TABLE_+0x60>
  400906:	68 09 00 00 00       	pushq  $0x9
  40090b:	e9 50 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400910 <fgetc@plt>:
  400910:	ff 25 52 57 20 00    	jmpq   *0x205752(%rip)        # 606068 <_GLOBAL_OFFSET_TABLE_+0x68>
  400916:	68 0a 00 00 00       	pushq  $0xa
  40091b:	e9 40 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400920 <__libc_start_main@plt>:
  400920:	ff 25 4a 57 20 00    	jmpq   *0x20574a(%rip)        # 606070 <_GLOBAL_OFFSET_TABLE_+0x70>
  400926:	68 0b 00 00 00       	pushq  $0xb
  40092b:	e9 30 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400930 <strcmp@plt>:
  400930:	ff 25 42 57 20 00    	jmpq   *0x205742(%rip)        # 606078 <_GLOBAL_OFFSET_TABLE_+0x78>
  400936:	68 0c 00 00 00       	pushq  $0xc
  40093b:	e9 20 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400940 <fprintf@plt>:
  400940:	ff 25 3a 57 20 00    	jmpq   *0x20573a(%rip)        # 606080 <_GLOBAL_OFFSET_TABLE_+0x80>
  400946:	68 0d 00 00 00       	pushq  $0xd
  40094b:	e9 10 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400950 <__gmon_start__@plt>:
  400950:	ff 25 32 57 20 00    	jmpq   *0x205732(%rip)        # 606088 <_GLOBAL_OFFSET_TABLE_+0x88>
  400956:	68 0e 00 00 00       	pushq  $0xe
  40095b:	e9 00 ff ff ff       	jmpq   400860 <_init+0x28>

0000000000400960 <memcpy@plt>:
  400960:	ff 25 2a 57 20 00    	jmpq   *0x20572a(%rip)        # 606090 <_GLOBAL_OFFSET_TABLE_+0x90>
  400966:	68 0f 00 00 00       	pushq  $0xf
  40096b:	e9 f0 fe ff ff       	jmpq   400860 <_init+0x28>

0000000000400970 <__sysv_signal@plt>:
  400970:	ff 25 22 57 20 00    	jmpq   *0x205722(%rip)        # 606098 <_GLOBAL_OFFSET_TABLE_+0x98>
  400976:	68 10 00 00 00       	pushq  $0x10
  40097b:	e9 e0 fe ff ff       	jmpq   400860 <_init+0x28>

0000000000400980 <malloc@plt>:
  400980:	ff 25 1a 57 20 00    	jmpq   *0x20571a(%rip)        # 6060a0 <_GLOBAL_OFFSET_TABLE_+0xa0>
  400986:	68 11 00 00 00       	pushq  $0x11
  40098b:	e9 d0 fe ff ff       	jmpq   400860 <_init+0x28>

0000000000400990 <fopen@plt>:
  400990:	ff 25 12 57 20 00    	jmpq   *0x205712(%rip)        # 6060a8 <_GLOBAL_OFFSET_TABLE_+0xa8>
  400996:	68 12 00 00 00       	pushq  $0x12
  40099b:	e9 c0 fe ff ff       	jmpq   400860 <_init+0x28>

00000000004009a0 <exit@plt>:
  4009a0:	ff 25 0a 57 20 00    	jmpq   *0x20570a(%rip)        # 6060b0 <_GLOBAL_OFFSET_TABLE_+0xb0>
  4009a6:	68 13 00 00 00       	pushq  $0x13
  4009ab:	e9 b0 fe ff ff       	jmpq   400860 <_init+0x28>

Disassembly of section .text:

00000000004009b0 <_start>:
  4009b0:	31 ed                	xor    %ebp,%ebp
  4009b2:	49 89 d1             	mov    %rdx,%r9
  4009b5:	5e                   	pop    %rsi
  4009b6:	48 89 e2             	mov    %rsp,%rdx
  4009b9:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
  4009bd:	50                   	push   %rax
  4009be:	54                   	push   %rsp
  4009bf:	49 c7 c0 c0 3c 40 00 	mov    $0x403cc0,%r8
  4009c6:	48 c7 c1 50 3c 40 00 	mov    $0x403c50,%rcx
  4009cd:	48 c7 c7 1f 0b 40 00 	mov    $0x400b1f,%rdi
  4009d4:	e8 47 ff ff ff       	callq  400920 <__libc_start_main@plt>
  4009d9:	f4                   	hlt    
  4009da:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

00000000004009e0 <deregister_tm_clones>:
  4009e0:	b8 cf 60 60 00       	mov    $0x6060cf,%eax
  4009e5:	55                   	push   %rbp
  4009e6:	48 2d c8 60 60 00    	sub    $0x6060c8,%rax
  4009ec:	48 83 f8 0e          	cmp    $0xe,%rax
  4009f0:	48 89 e5             	mov    %rsp,%rbp
  4009f3:	76 1b                	jbe    400a10 <deregister_tm_clones+0x30>
  4009f5:	b8 00 00 00 00       	mov    $0x0,%eax
  4009fa:	48 85 c0             	test   %rax,%rax
  4009fd:	74 11                	je     400a10 <deregister_tm_clones+0x30>
  4009ff:	5d                   	pop    %rbp
  400a00:	bf c8 60 60 00       	mov    $0x6060c8,%edi
  400a05:	ff e0                	jmpq   *%rax
  400a07:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  400a0e:	00 00 
  400a10:	5d                   	pop    %rbp
  400a11:	c3                   	retq   
  400a12:	0f 1f 40 00          	nopl   0x0(%rax)
  400a16:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  400a1d:	00 00 00 

0000000000400a20 <register_tm_clones>:
  400a20:	be c8 60 60 00       	mov    $0x6060c8,%esi
  400a25:	55                   	push   %rbp
  400a26:	48 81 ee c8 60 60 00 	sub    $0x6060c8,%rsi
  400a2d:	48 c1 fe 03          	sar    $0x3,%rsi
  400a31:	48 89 e5             	mov    %rsp,%rbp
  400a34:	48 89 f0             	mov    %rsi,%rax
  400a37:	48 c1 e8 3f          	shr    $0x3f,%rax
  400a3b:	48 01 c6             	add    %rax,%rsi
  400a3e:	48 d1 fe             	sar    %rsi
  400a41:	74 15                	je     400a58 <register_tm_clones+0x38>
  400a43:	b8 00 00 00 00       	mov    $0x0,%eax
  400a48:	48 85 c0             	test   %rax,%rax
  400a4b:	74 0b                	je     400a58 <register_tm_clones+0x38>
  400a4d:	5d                   	pop    %rbp
  400a4e:	bf c8 60 60 00       	mov    $0x6060c8,%edi
  400a53:	ff e0                	jmpq   *%rax
  400a55:	0f 1f 00             	nopl   (%rax)
  400a58:	5d                   	pop    %rbp
  400a59:	c3                   	retq   
  400a5a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000400a60 <__do_global_dtors_aux>:
  400a60:	80 3d 81 56 20 00 00 	cmpb   $0x0,0x205681(%rip)        # 6060e8 <completed.7291>
  400a67:	75 11                	jne    400a7a <__do_global_dtors_aux+0x1a>
  400a69:	55                   	push   %rbp
  400a6a:	48 89 e5             	mov    %rsp,%rbp
  400a6d:	e8 6e ff ff ff       	callq  4009e0 <deregister_tm_clones>
  400a72:	5d                   	pop    %rbp
  400a73:	c6 05 6e 56 20 00 01 	movb   $0x1,0x20566e(%rip)        # 6060e8 <completed.7291>
  400a7a:	f3 c3                	repz retq 
  400a7c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000400a80 <frame_dummy>:
  400a80:	bf 20 5e 60 00       	mov    $0x605e20,%edi
  400a85:	48 83 3f 00          	cmpq   $0x0,(%rdi)
  400a89:	75 05                	jne    400a90 <frame_dummy+0x10>
  400a8b:	eb 93                	jmp    400a20 <register_tm_clones>
  400a8d:	0f 1f 00             	nopl   (%rax)
  400a90:	b8 00 00 00 00       	mov    $0x0,%eax
  400a95:	48 85 c0             	test   %rax,%rax
  400a98:	74 f1                	je     400a8b <frame_dummy+0xb>
  400a9a:	55                   	push   %rbp
  400a9b:	48 89 e5             	mov    %rsp,%rbp
  400a9e:	ff d0                	callq  *%rax
  400aa0:	5d                   	pop    %rbp
  400aa1:	e9 7a ff ff ff       	jmpq   400a20 <register_tm_clones>

0000000000400aa6 <handler>:
#include "utils.h"
#include "ast.h"
#include "interpreter.h"


void handler(int sig) {
  400aa6:	55                   	push   %rbp
  400aa7:	48 89 e5             	mov    %rsp,%rbp
  400aaa:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  400aae:	89 7d 8c             	mov    %edi,-0x74(%rbp)
  400ab1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  400ab8:	00 00 
  400aba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  400abe:	31 c0                	xor    %eax,%eax
  void *array[10];
  size_t size;

  // get void*'s for all entries on the stack
  size = backtrace(array, 10);
  400ac0:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  400ac4:	be 0a 00 00 00       	mov    $0xa,%esi
  400ac9:	48 89 c7             	mov    %rax,%rdi
  400acc:	b8 00 00 00 00       	mov    $0x0,%eax
  400ad1:	e8 fa fd ff ff       	callq  4008d0 <backtrace@plt>
  400ad6:	48 98                	cltq   
  400ad8:	48 89 45 98          	mov    %rax,-0x68(%rbp)

  // print out all the frames to stderr
  fprintf(stderr, "Error: signal %d:\n", sig);
  400adc:	48 8b 05 fd 55 20 00 	mov    0x2055fd(%rip),%rax        # 6060e0 <stderr@@GLIBC_2.2.5>
  400ae3:	8b 55 8c             	mov    -0x74(%rbp),%edx
  400ae6:	be d8 3c 40 00       	mov    $0x403cd8,%esi
  400aeb:	48 89 c7             	mov    %rax,%rdi
  400aee:	b8 00 00 00 00       	mov    $0x0,%eax
  400af3:	e8 48 fe ff ff       	callq  400940 <fprintf@plt>
  backtrace_symbols_fd(array, size, STDERR_FILENO);
  400af8:	48 8b 4d 98          	mov    -0x68(%rbp),%rcx
  400afc:	48 8d 45 a0          	lea    -0x60(%rbp),%rax
  400b00:	ba 02 00 00 00       	mov    $0x2,%edx
  400b05:	48 89 ce             	mov    %rcx,%rsi
  400b08:	48 89 c7             	mov    %rax,%rdi
  400b0b:	b8 00 00 00 00       	mov    $0x0,%eax
  400b10:	e8 7b fd ff ff       	callq  400890 <backtrace_symbols_fd@plt>
  exit(1);
  400b15:	bf 01 00 00 00       	mov    $0x1,%edi
  400b1a:	e8 81 fe ff ff       	callq  4009a0 <exit@plt>

0000000000400b1f <main>:
}

int main (int argc, char** argvs) {
  400b1f:	55                   	push   %rbp
  400b20:	48 89 e5             	mov    %rsp,%rbp
  400b23:	48 83 ec 20          	sub    $0x20,%rsp
  400b27:	89 7d ec             	mov    %edi,-0x14(%rbp)
  400b2a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   signal(SIGSEGV, handler);
  400b2e:	be a6 0a 40 00       	mov    $0x400aa6,%esi
  400b33:	bf 0b 00 00 00       	mov    $0xb,%edi
  400b38:	e8 33 fe ff ff       	callq  400970 <__sysv_signal@plt>
  //Check number of arguments
  if(argc != 2){
  400b3d:	83 7d ec 02          	cmpl   $0x2,-0x14(%rbp)
  400b41:	74 14                	je     400b57 <main+0x38>
    printf("Expected 1 argument to commandline.\n");
  400b43:	bf f0 3c 40 00       	mov    $0x403cf0,%edi
  400b48:	e8 53 fd ff ff       	callq  4008a0 <puts@plt>
    exit(-1);
  400b4d:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  400b52:	e8 49 fe ff ff       	callq  4009a0 <exit@plt>
  }

  //Read in AST
  char* filename = argvs[1];
  400b57:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  400b5b:	48 8b 40 08          	mov    0x8(%rax),%rax
  400b5f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
  ScopeStmt* stmt = read_ast(filename);
  400b63:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400b67:	48 89 c7             	mov    %rax,%rdi
  400b6a:	e8 66 18 00 00       	callq  4023d5 <read_ast>
  400b6f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)

  //Interpret
  interpret(stmt);
  400b73:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400b77:	48 89 c7             	mov    %rax,%rdi
  400b7a:	e8 8a 30 00 00       	callq  403c09 <interpret>
  400b7f:	b8 00 00 00 00       	mov    $0x0,%eax
}
  400b84:	c9                   	leaveq 
  400b85:	c3                   	retq   

0000000000400b86 <max>:

//============================================================
//===================== CONVENIENCE ==========================
//============================================================

int max (int a, int b) {
  400b86:	55                   	push   %rbp
  400b87:	48 89 e5             	mov    %rsp,%rbp
  400b8a:	89 7d fc             	mov    %edi,-0x4(%rbp)
  400b8d:	89 75 f8             	mov    %esi,-0x8(%rbp)
  return a > b? a : b;
  400b90:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400b93:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  400b96:	0f 4d 45 f8          	cmovge -0x8(%rbp),%eax
}
  400b9a:	5d                   	pop    %rbp
  400b9b:	c3                   	retq   

0000000000400b9c <min>:

int min (int a, int b) {
  400b9c:	55                   	push   %rbp
  400b9d:	48 89 e5             	mov    %rsp,%rbp
  400ba0:	89 7d fc             	mov    %edi,-0x4(%rbp)
  400ba3:	89 75 f8             	mov    %esi,-0x8(%rbp)
  return a < b? a : b;
  400ba6:	8b 45 fc             	mov    -0x4(%rbp),%eax
  400ba9:	39 45 f8             	cmp    %eax,-0x8(%rbp)
  400bac:	0f 4e 45 f8          	cmovle -0x8(%rbp),%eax
}
  400bb0:	5d                   	pop    %rbp
  400bb1:	c3                   	retq   

0000000000400bb2 <print_string>:

void print_string (char* str) {
  400bb2:	55                   	push   %rbp
  400bb3:	48 89 e5             	mov    %rsp,%rbp
  400bb6:	48 83 ec 20          	sub    $0x20,%rsp
  400bba:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  printf("\"");
  400bbe:	bf 22 00 00 00       	mov    $0x22,%edi
  400bc3:	e8 b8 fc ff ff       	callq  400880 <putchar@plt>
  while(1){
    char c = str[0];
  400bc8:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400bcc:	0f b6 00             	movzbl (%rax),%eax
  400bcf:	88 45 ff             	mov    %al,-0x1(%rbp)
    str++;
  400bd2:	48 83 45 e8 01       	addq   $0x1,-0x18(%rbp)
    switch(c){
  400bd7:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
  400bdb:	83 f8 0a             	cmp    $0xa,%eax
  400bde:	74 17                	je     400bf7 <print_string+0x45>
  400be0:	83 f8 0a             	cmp    $0xa,%eax
  400be3:	7f 06                	jg     400beb <print_string+0x39>
  400be5:	85 c0                	test   %eax,%eax
  400be7:	74 41                	je     400c2a <print_string+0x78>
  400be9:	eb 4b                	jmp    400c36 <print_string+0x84>
  400beb:	83 f8 22             	cmp    $0x22,%eax
  400bee:	74 29                	je     400c19 <print_string+0x67>
  400bf0:	83 f8 5c             	cmp    $0x5c,%eax
  400bf3:	74 13                	je     400c08 <print_string+0x56>
  400bf5:	eb 3f                	jmp    400c36 <print_string+0x84>
    case '\n':
      printf("\\n");
  400bf7:	bf 18 3d 40 00       	mov    $0x403d18,%edi
  400bfc:	b8 00 00 00 00       	mov    $0x0,%eax
  400c01:	e8 ea fc ff ff       	callq  4008f0 <printf@plt>
      break;
  400c06:	eb 3a                	jmp    400c42 <print_string+0x90>
    case '\\':
      printf("\\\\");
  400c08:	bf 1b 3d 40 00       	mov    $0x403d1b,%edi
  400c0d:	b8 00 00 00 00       	mov    $0x0,%eax
  400c12:	e8 d9 fc ff ff       	callq  4008f0 <printf@plt>
      break;
  400c17:	eb 29                	jmp    400c42 <print_string+0x90>
    case '"':
      printf("\\\"");
  400c19:	bf 1e 3d 40 00       	mov    $0x403d1e,%edi
  400c1e:	b8 00 00 00 00       	mov    $0x0,%eax
  400c23:	e8 c8 fc ff ff       	callq  4008f0 <printf@plt>
      break;
  400c28:	eb 18                	jmp    400c42 <print_string+0x90>
    case 0:
      printf("\"");
  400c2a:	bf 22 00 00 00       	mov    $0x22,%edi
  400c2f:	e8 4c fc ff ff       	callq  400880 <putchar@plt>
      return;
  400c34:	eb 0e                	jmp    400c44 <print_string+0x92>
    default:
      printf("%c", c);
  400c36:	0f be 45 ff          	movsbl -0x1(%rbp),%eax
  400c3a:	89 c7                	mov    %eax,%edi
  400c3c:	e8 3f fc ff ff       	callq  400880 <putchar@plt>
      break;
  400c41:	90                   	nop
    }
  }
  400c42:	eb 84                	jmp    400bc8 <print_string+0x16>
}
  400c44:	c9                   	leaveq 
  400c45:	c3                   	retq   

0000000000400c46 <make_vector>:

//============================================================
//===================== VECTORS ==============================
//============================================================

Vector* make_vector () {
  400c46:	55                   	push   %rbp
  400c47:	48 89 e5             	mov    %rsp,%rbp
  400c4a:	48 83 ec 10          	sub    $0x10,%rsp
  Vector* v = (Vector*)malloc(sizeof(Vector));
  400c4e:	bf 10 00 00 00       	mov    $0x10,%edi
  400c53:	e8 28 fd ff ff       	callq  400980 <malloc@plt>
  400c58:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  v->size = 0;
  400c5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c60:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  v->capacity = 8;
  400c66:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c6a:	c7 40 04 08 00 00 00 	movl   $0x8,0x4(%rax)
  v->array = malloc(sizeof(void*) * v->capacity);
  400c71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c75:	8b 40 04             	mov    0x4(%rax),%eax
  400c78:	48 98                	cltq   
  400c7a:	48 c1 e0 03          	shl    $0x3,%rax
  400c7e:	48 89 c7             	mov    %rax,%rdi
  400c81:	e8 fa fc ff ff       	callq  400980 <malloc@plt>
  400c86:	48 89 c2             	mov    %rax,%rdx
  400c89:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400c8d:	48 89 50 08          	mov    %rdx,0x8(%rax)
  return v;
  400c91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  400c95:	c9                   	leaveq 
  400c96:	c3                   	retq   

0000000000400c97 <vector_ensure_capacity>:

void vector_ensure_capacity (Vector* v, int c) {
  400c97:	55                   	push   %rbp
  400c98:	48 89 e5             	mov    %rsp,%rbp
  400c9b:	48 83 ec 20          	sub    $0x20,%rsp
  400c9f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  400ca3:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  if(v->capacity < c){
  400ca6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400caa:	8b 40 04             	mov    0x4(%rax),%eax
  400cad:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  400cb0:	7d 7b                	jge    400d2d <vector_ensure_capacity+0x96>
    int c2 = max(v->capacity * 2, c);
  400cb2:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400cb6:	8b 40 04             	mov    0x4(%rax),%eax
  400cb9:	8d 14 00             	lea    (%rax,%rax,1),%edx
  400cbc:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  400cbf:	89 c6                	mov    %eax,%esi
  400cc1:	89 d7                	mov    %edx,%edi
  400cc3:	e8 be fe ff ff       	callq  400b86 <max>
  400cc8:	89 45 f4             	mov    %eax,-0xc(%rbp)
    void** a2 = malloc(sizeof(void*) * c2);
  400ccb:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400cce:	48 98                	cltq   
  400cd0:	48 c1 e0 03          	shl    $0x3,%rax
  400cd4:	48 89 c7             	mov    %rax,%rdi
  400cd7:	e8 a4 fc ff ff       	callq  400980 <malloc@plt>
  400cdc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    memcpy(a2, v->array, sizeof(void*) * v->size);
  400ce0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400ce4:	8b 00                	mov    (%rax),%eax
  400ce6:	48 98                	cltq   
  400ce8:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  400cef:	00 
  400cf0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400cf4:	48 8b 48 08          	mov    0x8(%rax),%rcx
  400cf8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400cfc:	48 89 ce             	mov    %rcx,%rsi
  400cff:	48 89 c7             	mov    %rax,%rdi
  400d02:	e8 59 fc ff ff       	callq  400960 <memcpy@plt>
    free(v->array);
  400d07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d0b:	48 8b 40 08          	mov    0x8(%rax),%rax
  400d0f:	48 89 c7             	mov    %rax,%rdi
  400d12:	e8 59 fb ff ff       	callq  400870 <free@plt>
    v->capacity = c2;
  400d17:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d1b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  400d1e:	89 50 04             	mov    %edx,0x4(%rax)
    v->array = a2;
  400d21:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400d25:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  400d29:	48 89 50 08          	mov    %rdx,0x8(%rax)
  }
}
  400d2d:	c9                   	leaveq 
  400d2e:	c3                   	retq   

0000000000400d2f <vector_set_length>:

void vector_set_length (Vector* v, int len, void* x) {
  400d2f:	55                   	push   %rbp
  400d30:	48 89 e5             	mov    %rsp,%rbp
  400d33:	48 83 ec 20          	sub    $0x20,%rsp
  400d37:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400d3b:	89 75 f4             	mov    %esi,-0xc(%rbp)
  400d3e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  if(len < 0){
  400d42:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  400d46:	79 14                	jns    400d5c <vector_set_length+0x2d>
    printf("Negative length given to vector.\n");
  400d48:	bf 28 3d 40 00       	mov    $0x403d28,%edi
  400d4d:	e8 4e fb ff ff       	callq  4008a0 <puts@plt>
    exit(-1);
  400d52:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  400d57:	e8 44 fc ff ff       	callq  4009a0 <exit@plt>
  }
  if(len <= v->size){
  400d5c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400d60:	8b 00                	mov    (%rax),%eax
  400d62:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  400d65:	7c 0b                	jl     400d72 <vector_set_length+0x43>
    v->size = len;
  400d67:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400d6b:	8b 55 f4             	mov    -0xc(%rbp),%edx
  400d6e:	89 10                	mov    %edx,(%rax)
  400d70:	eb 20                	jmp    400d92 <vector_set_length+0x63>
  }else{
    while(v->size < len)
  400d72:	eb 13                	jmp    400d87 <vector_set_length+0x58>
      vector_add(v, x);
  400d74:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400d78:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400d7c:	48 89 d6             	mov    %rdx,%rsi
  400d7f:	48 89 c7             	mov    %rax,%rdi
  400d82:	e8 0d 00 00 00       	callq  400d94 <vector_add>
    exit(-1);
  }
  if(len <= v->size){
    v->size = len;
  }else{
    while(v->size < len)
  400d87:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400d8b:	8b 00                	mov    (%rax),%eax
  400d8d:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  400d90:	7c e2                	jl     400d74 <vector_set_length+0x45>
      vector_add(v, x);
  }
}
  400d92:	c9                   	leaveq 
  400d93:	c3                   	retq   

0000000000400d94 <vector_add>:

void vector_add (Vector* v, void* val) {
  400d94:	55                   	push   %rbp
  400d95:	48 89 e5             	mov    %rsp,%rbp
  400d98:	48 83 ec 10          	sub    $0x10,%rsp
  400d9c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400da0:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  vector_ensure_capacity(v, v->size + 1);
  400da4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400da8:	8b 00                	mov    (%rax),%eax
  400daa:	8d 50 01             	lea    0x1(%rax),%edx
  400dad:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400db1:	89 d6                	mov    %edx,%esi
  400db3:	48 89 c7             	mov    %rax,%rdi
  400db6:	e8 dc fe ff ff       	callq  400c97 <vector_ensure_capacity>
  v->array[v->size] = val;
  400dbb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400dbf:	48 8b 50 08          	mov    0x8(%rax),%rdx
  400dc3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400dc7:	8b 00                	mov    (%rax),%eax
  400dc9:	48 98                	cltq   
  400dcb:	48 c1 e0 03          	shl    $0x3,%rax
  400dcf:	48 01 c2             	add    %rax,%rdx
  400dd2:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  400dd6:	48 89 02             	mov    %rax,(%rdx)
  v->size++;
  400dd9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400ddd:	8b 00                	mov    (%rax),%eax
  400ddf:	8d 50 01             	lea    0x1(%rax),%edx
  400de2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400de6:	89 10                	mov    %edx,(%rax)
}
  400de8:	c9                   	leaveq 
  400de9:	c3                   	retq   

0000000000400dea <vector_pop>:

void* vector_pop (Vector* v) {
  400dea:	55                   	push   %rbp
  400deb:	48 89 e5             	mov    %rsp,%rbp
  400dee:	48 83 ec 10          	sub    $0x10,%rsp
  400df2:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  if(v->size == 0){
  400df6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400dfa:	8b 00                	mov    (%rax),%eax
  400dfc:	85 c0                	test   %eax,%eax
  400dfe:	75 14                	jne    400e14 <vector_pop+0x2a>
    printf("Pop from empty vector.\n");
  400e00:	bf 49 3d 40 00       	mov    $0x403d49,%edi
  400e05:	e8 96 fa ff ff       	callq  4008a0 <puts@plt>
    exit(-1);
  400e0a:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  400e0f:	e8 8c fb ff ff       	callq  4009a0 <exit@plt>
  }  
  v->size--;
  400e14:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e18:	8b 00                	mov    (%rax),%eax
  400e1a:	8d 50 ff             	lea    -0x1(%rax),%edx
  400e1d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e21:	89 10                	mov    %edx,(%rax)
  return v->array[v->size];
  400e23:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e27:	48 8b 50 08          	mov    0x8(%rax),%rdx
  400e2b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e2f:	8b 00                	mov    (%rax),%eax
  400e31:	48 98                	cltq   
  400e33:	48 c1 e0 03          	shl    $0x3,%rax
  400e37:	48 01 d0             	add    %rdx,%rax
  400e3a:	48 8b 00             	mov    (%rax),%rax
}
  400e3d:	c9                   	leaveq 
  400e3e:	c3                   	retq   

0000000000400e3f <vector_peek>:

void* vector_peek (Vector* v) {
  400e3f:	55                   	push   %rbp
  400e40:	48 89 e5             	mov    %rsp,%rbp
  400e43:	48 83 ec 10          	sub    $0x10,%rsp
  400e47:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  if(v->size == 0){
  400e4b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e4f:	8b 00                	mov    (%rax),%eax
  400e51:	85 c0                	test   %eax,%eax
  400e53:	75 14                	jne    400e69 <vector_peek+0x2a>
    printf("Peek from empty vector.\n");
  400e55:	bf 60 3d 40 00       	mov    $0x403d60,%edi
  400e5a:	e8 41 fa ff ff       	callq  4008a0 <puts@plt>
    exit(-1);
  400e5f:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  400e64:	e8 37 fb ff ff       	callq  4009a0 <exit@plt>
  }  
  return v->array[v->size - 1];
  400e69:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e6d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  400e71:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e75:	8b 00                	mov    (%rax),%eax
  400e77:	48 98                	cltq   
  400e79:	48 c1 e0 03          	shl    $0x3,%rax
  400e7d:	48 83 e8 08          	sub    $0x8,%rax
  400e81:	48 01 d0             	add    %rdx,%rax
  400e84:	48 8b 00             	mov    (%rax),%rax
}
  400e87:	c9                   	leaveq 
  400e88:	c3                   	retq   

0000000000400e89 <vector_clear>:

void vector_clear (Vector* v){
  400e89:	55                   	push   %rbp
  400e8a:	48 89 e5             	mov    %rsp,%rbp
  400e8d:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  v->size = 0;
  400e91:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400e95:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
}
  400e9b:	5d                   	pop    %rbp
  400e9c:	c3                   	retq   

0000000000400e9d <vector_free>:

void vector_free (Vector* v){
  400e9d:	55                   	push   %rbp
  400e9e:	48 89 e5             	mov    %rsp,%rbp
  400ea1:	48 83 ec 10          	sub    $0x10,%rsp
  400ea5:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  free(v->array);
  400ea9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400ead:	48 8b 40 08          	mov    0x8(%rax),%rax
  400eb1:	48 89 c7             	mov    %rax,%rdi
  400eb4:	e8 b7 f9 ff ff       	callq  400870 <free@plt>
  free(v);
  400eb9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400ebd:	48 89 c7             	mov    %rax,%rdi
  400ec0:	e8 ab f9 ff ff       	callq  400870 <free@plt>
}
  400ec5:	c9                   	leaveq 
  400ec6:	c3                   	retq   

0000000000400ec7 <vector_get>:

void* vector_get (Vector* v, int i){
  400ec7:	55                   	push   %rbp
  400ec8:	48 89 e5             	mov    %rsp,%rbp
  400ecb:	48 83 ec 10          	sub    $0x10,%rsp
  400ecf:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400ed3:	89 75 f4             	mov    %esi,-0xc(%rbp)
  if(i < 0 || i >= v->size){
  400ed6:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  400eda:	78 0b                	js     400ee7 <vector_get+0x20>
  400edc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400ee0:	8b 00                	mov    (%rax),%eax
  400ee2:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  400ee5:	7f 1e                	jg     400f05 <vector_get+0x3e>
    printf("Index %d out of bounds.\n", i);
  400ee7:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400eea:	89 c6                	mov    %eax,%esi
  400eec:	bf 78 3d 40 00       	mov    $0x403d78,%edi
  400ef1:	b8 00 00 00 00       	mov    $0x0,%eax
  400ef6:	e8 f5 f9 ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  400efb:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  400f00:	e8 9b fa ff ff       	callq  4009a0 <exit@plt>
  }
  return v->array[i];    
  400f05:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f09:	48 8b 40 08          	mov    0x8(%rax),%rax
  400f0d:	8b 55 f4             	mov    -0xc(%rbp),%edx
  400f10:	48 63 d2             	movslq %edx,%rdx
  400f13:	48 c1 e2 03          	shl    $0x3,%rdx
  400f17:	48 01 d0             	add    %rdx,%rax
  400f1a:	48 8b 00             	mov    (%rax),%rax
}
  400f1d:	c9                   	leaveq 
  400f1e:	c3                   	retq   

0000000000400f1f <vector_set>:

void vector_set (Vector* v, int i, void* x){
  400f1f:	55                   	push   %rbp
  400f20:	48 89 e5             	mov    %rsp,%rbp
  400f23:	48 83 ec 20          	sub    $0x20,%rsp
  400f27:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  400f2b:	89 75 f4             	mov    %esi,-0xc(%rbp)
  400f2e:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
  if(i < 0 || i > v->size){
  400f32:	83 7d f4 00          	cmpl   $0x0,-0xc(%rbp)
  400f36:	78 0b                	js     400f43 <vector_set+0x24>
  400f38:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f3c:	8b 00                	mov    (%rax),%eax
  400f3e:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  400f41:	7d 1e                	jge    400f61 <vector_set+0x42>
    printf("Index %d out of bounds.\n", i);
  400f43:	8b 45 f4             	mov    -0xc(%rbp),%eax
  400f46:	89 c6                	mov    %eax,%esi
  400f48:	bf 78 3d 40 00       	mov    $0x403d78,%edi
  400f4d:	b8 00 00 00 00       	mov    $0x0,%eax
  400f52:	e8 99 f9 ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  400f57:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  400f5c:	e8 3f fa ff ff       	callq  4009a0 <exit@plt>
  }else if(i == v->size){
  400f61:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f65:	8b 00                	mov    (%rax),%eax
  400f67:	3b 45 f4             	cmp    -0xc(%rbp),%eax
  400f6a:	75 15                	jne    400f81 <vector_set+0x62>
    vector_add(v, x);
  400f6c:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  400f70:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f74:	48 89 d6             	mov    %rdx,%rsi
  400f77:	48 89 c7             	mov    %rax,%rdi
  400f7a:	e8 15 fe ff ff       	callq  400d94 <vector_add>
  400f7f:	eb 1c                	jmp    400f9d <vector_set+0x7e>
  }else{
    v->array[i] = x;
  400f81:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400f85:	48 8b 40 08          	mov    0x8(%rax),%rax
  400f89:	8b 55 f4             	mov    -0xc(%rbp),%edx
  400f8c:	48 63 d2             	movslq %edx,%rdx
  400f8f:	48 c1 e2 03          	shl    $0x3,%rdx
  400f93:	48 01 c2             	add    %rax,%rdx
  400f96:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  400f9a:	48 89 02             	mov    %rax,(%rdx)
  }
}
  400f9d:	c9                   	leaveq 
  400f9e:	c3                   	retq   

0000000000400f9f <make_IntExp>:

//============================================================
//================= CONSTRUCTORS =============================
//============================================================

Exp* make_IntExp (int value) {
  400f9f:	55                   	push   %rbp
  400fa0:	48 89 e5             	mov    %rsp,%rbp
  400fa3:	48 83 ec 20          	sub    $0x20,%rsp
  400fa7:	89 7d ec             	mov    %edi,-0x14(%rbp)
  IntExp* e = malloc(sizeof(IntExp));
  400faa:	bf 08 00 00 00       	mov    $0x8,%edi
  400faf:	e8 cc f9 ff ff       	callq  400980 <malloc@plt>
  400fb4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = INT_EXP;
  400fb8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400fbc:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
  e->value = value;
  400fc2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400fc6:	8b 55 ec             	mov    -0x14(%rbp),%edx
  400fc9:	89 50 04             	mov    %edx,0x4(%rax)
  return (Exp*)e;
  400fcc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  400fd0:	c9                   	leaveq 
  400fd1:	c3                   	retq   

0000000000400fd2 <make_NullExp>:

Exp* make_NullExp () {
  400fd2:	55                   	push   %rbp
  400fd3:	48 89 e5             	mov    %rsp,%rbp
  400fd6:	48 83 ec 10          	sub    $0x10,%rsp
  Exp* e = malloc(sizeof(Exp));
  400fda:	bf 04 00 00 00       	mov    $0x4,%edi
  400fdf:	e8 9c f9 ff ff       	callq  400980 <malloc@plt>
  400fe4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = NULL_EXP;
  400fe8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  400fec:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
  return e;
  400ff2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  400ff6:	c9                   	leaveq 
  400ff7:	c3                   	retq   

0000000000400ff8 <make_PrintfExp>:

Exp* make_PrintfExp (char* format, int nexps, Exp** exps) {
  400ff8:	55                   	push   %rbp
  400ff9:	48 89 e5             	mov    %rsp,%rbp
  400ffc:	48 83 ec 30          	sub    $0x30,%rsp
  401000:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401004:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  401007:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  PrintfExp* e = malloc(sizeof(PrintfExp));
  40100b:	bf 20 00 00 00       	mov    $0x20,%edi
  401010:	e8 6b f9 ff ff       	callq  400980 <malloc@plt>
  401015:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = PRINTF_EXP;
  401019:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40101d:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
  e->format = format;
  401023:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401027:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40102b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->nexps = nexps;
  40102f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401033:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  401036:	89 50 10             	mov    %edx,0x10(%rax)
  e->exps = exps;
  401039:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40103d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  401041:	48 89 50 18          	mov    %rdx,0x18(%rax)
  return (Exp*)e;
  401045:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  401049:	c9                   	leaveq 
  40104a:	c3                   	retq   

000000000040104b <make_ArrayExp>:

Exp* make_ArrayExp (Exp* length, Exp* init) {
  40104b:	55                   	push   %rbp
  40104c:	48 89 e5             	mov    %rsp,%rbp
  40104f:	48 83 ec 20          	sub    $0x20,%rsp
  401053:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401057:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  ArrayExp* e = malloc(sizeof(ArrayExp));
  40105b:	bf 18 00 00 00       	mov    $0x18,%edi
  401060:	e8 1b f9 ff ff       	callq  400980 <malloc@plt>
  401065:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = ARRAY_EXP;
  401069:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40106d:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
  e->length = length;
  401073:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401077:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40107b:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->init = init;
  40107f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401083:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401087:	48 89 50 10          	mov    %rdx,0x10(%rax)
  return (Exp*)e;
  40108b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40108f:	c9                   	leaveq 
  401090:	c3                   	retq   

0000000000401091 <make_ObjectExp>:

Exp* make_ObjectExp (Exp* parent, int nslots, SlotStmt** slots) {
  401091:	55                   	push   %rbp
  401092:	48 89 e5             	mov    %rsp,%rbp
  401095:	48 83 ec 30          	sub    $0x30,%rsp
  401099:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40109d:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  4010a0:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  ObjectExp* e = malloc(sizeof(ObjectExp));
  4010a4:	bf 20 00 00 00       	mov    $0x20,%edi
  4010a9:	e8 d2 f8 ff ff       	callq  400980 <malloc@plt>
  4010ae:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = OBJECT_EXP;
  4010b2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010b6:	c7 00 04 00 00 00    	movl   $0x4,(%rax)
  e->parent = parent;
  4010bc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010c0:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4010c4:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->nslots = nslots;
  4010c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010cc:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  4010cf:	89 50 10             	mov    %edx,0x10(%rax)
  e->slots = slots;
  4010d2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4010d6:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4010da:	48 89 50 18          	mov    %rdx,0x18(%rax)
  return (Exp*)e;
  4010de:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4010e2:	c9                   	leaveq 
  4010e3:	c3                   	retq   

00000000004010e4 <make_SlotExp>:

Exp* make_SlotExp (char* name, Exp* exp) {
  4010e4:	55                   	push   %rbp
  4010e5:	48 89 e5             	mov    %rsp,%rbp
  4010e8:	48 83 ec 20          	sub    $0x20,%rsp
  4010ec:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4010f0:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  SlotExp* e = malloc(sizeof(SlotExp));
  4010f4:	bf 18 00 00 00       	mov    $0x18,%edi
  4010f9:	e8 82 f8 ff ff       	callq  400980 <malloc@plt>
  4010fe:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = SLOT_EXP;
  401102:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401106:	c7 00 05 00 00 00    	movl   $0x5,(%rax)
  e->name = name;
  40110c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401110:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401114:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->exp = exp;
  401118:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40111c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401120:	48 89 50 10          	mov    %rdx,0x10(%rax)
  return (Exp*)e;
  401124:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  401128:	c9                   	leaveq 
  401129:	c3                   	retq   

000000000040112a <make_SetSlotExp>:

Exp* make_SetSlotExp (char* name, Exp* exp, Exp* value) {
  40112a:	55                   	push   %rbp
  40112b:	48 89 e5             	mov    %rsp,%rbp
  40112e:	48 83 ec 30          	sub    $0x30,%rsp
  401132:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401136:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40113a:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  SetSlotExp* e = malloc(sizeof(SetSlotExp));
  40113e:	bf 20 00 00 00       	mov    $0x20,%edi
  401143:	e8 38 f8 ff ff       	callq  400980 <malloc@plt>
  401148:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = SET_SLOT_EXP;
  40114c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401150:	c7 00 06 00 00 00    	movl   $0x6,(%rax)
  e->name = name;
  401156:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40115a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40115e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->exp = exp;
  401162:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401166:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40116a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e->value = value;
  40116e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401172:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  401176:	48 89 50 18          	mov    %rdx,0x18(%rax)
  return (Exp*)e;
  40117a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40117e:	c9                   	leaveq 
  40117f:	c3                   	retq   

0000000000401180 <make_CallSlotExp>:

Exp* make_CallSlotExp (char* name, Exp* exp, int nargs, Exp** args) {
  401180:	55                   	push   %rbp
  401181:	48 89 e5             	mov    %rsp,%rbp
  401184:	48 83 ec 30          	sub    $0x30,%rsp
  401188:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40118c:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  401190:	89 55 dc             	mov    %edx,-0x24(%rbp)
  401193:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  CallSlotExp* e = malloc(sizeof(CallSlotExp));
  401197:	bf 28 00 00 00       	mov    $0x28,%edi
  40119c:	e8 df f7 ff ff       	callq  400980 <malloc@plt>
  4011a1:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = CALL_SLOT_EXP;
  4011a5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011a9:	c7 00 07 00 00 00    	movl   $0x7,(%rax)
  e->name = name;
  4011af:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011b3:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4011b7:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->exp = exp;
  4011bb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011bf:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4011c3:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e->nargs = nargs;
  4011c7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011cb:	8b 55 dc             	mov    -0x24(%rbp),%edx
  4011ce:	89 50 18             	mov    %edx,0x18(%rax)
  e->args = args;
  4011d1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4011d5:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4011d9:	48 89 50 20          	mov    %rdx,0x20(%rax)
  return (Exp*)e;
  4011dd:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4011e1:	c9                   	leaveq 
  4011e2:	c3                   	retq   

00000000004011e3 <make_CallExp>:

Exp* make_CallExp (char* name, int nargs, Exp** args) {
  4011e3:	55                   	push   %rbp
  4011e4:	48 89 e5             	mov    %rsp,%rbp
  4011e7:	48 83 ec 30          	sub    $0x30,%rsp
  4011eb:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4011ef:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  4011f2:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  CallExp* e = malloc(sizeof(CallExp));
  4011f6:	bf 20 00 00 00       	mov    $0x20,%edi
  4011fb:	e8 80 f7 ff ff       	callq  400980 <malloc@plt>
  401200:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = CALL_EXP;
  401204:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401208:	c7 00 08 00 00 00    	movl   $0x8,(%rax)
  e->name = name;
  40120e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401212:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401216:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->nargs = nargs;
  40121a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40121e:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  401221:	89 50 10             	mov    %edx,0x10(%rax)
  e->args = args;
  401224:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401228:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40122c:	48 89 50 18          	mov    %rdx,0x18(%rax)
  return (Exp*)e;
  401230:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  401234:	c9                   	leaveq 
  401235:	c3                   	retq   

0000000000401236 <make_SetExp>:

Exp* make_SetExp (char* name, Exp* exp) {
  401236:	55                   	push   %rbp
  401237:	48 89 e5             	mov    %rsp,%rbp
  40123a:	48 83 ec 20          	sub    $0x20,%rsp
  40123e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401242:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  SetExp* e = malloc(sizeof(SetExp));
  401246:	bf 18 00 00 00       	mov    $0x18,%edi
  40124b:	e8 30 f7 ff ff       	callq  400980 <malloc@plt>
  401250:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = SET_EXP;
  401254:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401258:	c7 00 09 00 00 00    	movl   $0x9,(%rax)
  e->name = name;
  40125e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401262:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401266:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->exp = exp;
  40126a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40126e:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401272:	48 89 50 10          	mov    %rdx,0x10(%rax)
  return (Exp*)e;
  401276:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40127a:	c9                   	leaveq 
  40127b:	c3                   	retq   

000000000040127c <make_IfExp>:

Exp* make_IfExp (Exp* pred, ScopeStmt* conseq, ScopeStmt* alt) {
  40127c:	55                   	push   %rbp
  40127d:	48 89 e5             	mov    %rsp,%rbp
  401280:	48 83 ec 30          	sub    $0x30,%rsp
  401284:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401288:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40128c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  IfExp* e = malloc(sizeof(IfExp));
  401290:	bf 20 00 00 00       	mov    $0x20,%edi
  401295:	e8 e6 f6 ff ff       	callq  400980 <malloc@plt>
  40129a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = IF_EXP;
  40129e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012a2:	c7 00 0a 00 00 00    	movl   $0xa,(%rax)
  e->pred = pred;
  4012a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012ac:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4012b0:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->conseq = conseq;
  4012b4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012b8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4012bc:	48 89 50 10          	mov    %rdx,0x10(%rax)
  e->alt = alt;
  4012c0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012c4:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4012c8:	48 89 50 18          	mov    %rdx,0x18(%rax)
  return (Exp*)e;
  4012cc:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4012d0:	c9                   	leaveq 
  4012d1:	c3                   	retq   

00000000004012d2 <make_WhileExp>:

Exp* make_WhileExp (Exp* pred, ScopeStmt* body) {
  4012d2:	55                   	push   %rbp
  4012d3:	48 89 e5             	mov    %rsp,%rbp
  4012d6:	48 83 ec 20          	sub    $0x20,%rsp
  4012da:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4012de:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  WhileExp* e = malloc(sizeof(WhileExp));
  4012e2:	bf 18 00 00 00       	mov    $0x18,%edi
  4012e7:	e8 94 f6 ff ff       	callq  400980 <malloc@plt>
  4012ec:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = WHILE_EXP;
  4012f0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012f4:	c7 00 0b 00 00 00    	movl   $0xb,(%rax)
  e->pred = pred;
  4012fa:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4012fe:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401302:	48 89 50 08          	mov    %rdx,0x8(%rax)
  e->body = body;
  401306:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40130a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40130e:	48 89 50 10          	mov    %rdx,0x10(%rax)
  return (Exp*)e;
  401312:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  401316:	c9                   	leaveq 
  401317:	c3                   	retq   

0000000000401318 <make_RefExp>:

Exp* make_RefExp (char* name) {
  401318:	55                   	push   %rbp
  401319:	48 89 e5             	mov    %rsp,%rbp
  40131c:	48 83 ec 20          	sub    $0x20,%rsp
  401320:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  RefExp* e = malloc(sizeof(RefExp));
  401324:	bf 10 00 00 00       	mov    $0x10,%edi
  401329:	e8 52 f6 ff ff       	callq  400980 <malloc@plt>
  40132e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  e->tag = REF_EXP;
  401332:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401336:	c7 00 0c 00 00 00    	movl   $0xc,(%rax)
  e->name = name;
  40133c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401340:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401344:	48 89 50 08          	mov    %rdx,0x8(%rax)
  return (Exp*)e;
  401348:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40134c:	c9                   	leaveq 
  40134d:	c3                   	retq   

000000000040134e <make_SlotVar>:

SlotStmt* make_SlotVar (char* name, Exp* exp) {
  40134e:	55                   	push   %rbp
  40134f:	48 89 e5             	mov    %rsp,%rbp
  401352:	48 83 ec 20          	sub    $0x20,%rsp
  401356:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  40135a:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  SlotVar* s = malloc(sizeof(SlotVar));
  40135e:	bf 18 00 00 00       	mov    $0x18,%edi
  401363:	e8 18 f6 ff ff       	callq  400980 <malloc@plt>
  401368:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  s->tag = VAR_STMT;
  40136c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401370:	c7 00 0d 00 00 00    	movl   $0xd,(%rax)
  s->name = name;
  401376:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40137a:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40137e:	48 89 50 08          	mov    %rdx,0x8(%rax)
  s->exp = exp;
  401382:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401386:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40138a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  return (SlotStmt*)s;
  40138e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  401392:	c9                   	leaveq 
  401393:	c3                   	retq   

0000000000401394 <make_SlotMethod>:

SlotStmt* make_SlotMethod (char* name, int nargs, char** args, ScopeStmt* body) {
  401394:	55                   	push   %rbp
  401395:	48 89 e5             	mov    %rsp,%rbp
  401398:	48 83 ec 30          	sub    $0x30,%rsp
  40139c:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4013a0:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  4013a3:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  4013a7:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  SlotMethod* s = malloc(sizeof(SlotMethod));
  4013ab:	bf 28 00 00 00       	mov    $0x28,%edi
  4013b0:	e8 cb f5 ff ff       	callq  400980 <malloc@plt>
  4013b5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  s->tag = FN_STMT;
  4013b9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4013bd:	c7 00 0e 00 00 00    	movl   $0xe,(%rax)
  s->name = name;
  4013c3:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4013c7:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4013cb:	48 89 50 08          	mov    %rdx,0x8(%rax)
  s->nargs = nargs;
  4013cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4013d3:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  4013d6:	89 50 10             	mov    %edx,0x10(%rax)
  s->args = args;
  4013d9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4013dd:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4013e1:	48 89 50 18          	mov    %rdx,0x18(%rax)
  s->body = body;
  4013e5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4013e9:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4013ed:	48 89 50 20          	mov    %rdx,0x20(%rax)
  return (SlotStmt*)s;
  4013f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4013f5:	c9                   	leaveq 
  4013f6:	c3                   	retq   

00000000004013f7 <make_ScopeVar>:

ScopeStmt* make_ScopeVar (char* name, Exp* exp) {
  4013f7:	55                   	push   %rbp
  4013f8:	48 89 e5             	mov    %rsp,%rbp
  4013fb:	48 83 ec 20          	sub    $0x20,%rsp
  4013ff:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401403:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  ScopeVar* s = malloc(sizeof(ScopeVar));
  401407:	bf 18 00 00 00       	mov    $0x18,%edi
  40140c:	e8 6f f5 ff ff       	callq  400980 <malloc@plt>
  401411:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  s->tag = VAR_STMT;
  401415:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401419:	c7 00 0d 00 00 00    	movl   $0xd,(%rax)
  s->name = name;
  40141f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401423:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401427:	48 89 50 08          	mov    %rdx,0x8(%rax)
  s->exp = exp;
  40142b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40142f:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  401433:	48 89 50 10          	mov    %rdx,0x10(%rax)
  return (ScopeStmt*)s;
  401437:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40143b:	c9                   	leaveq 
  40143c:	c3                   	retq   

000000000040143d <make_ScopeFn>:

ScopeStmt* make_ScopeFn (char* name, int nargs, char** args, ScopeStmt* body) {
  40143d:	55                   	push   %rbp
  40143e:	48 89 e5             	mov    %rsp,%rbp
  401441:	48 83 ec 30          	sub    $0x30,%rsp
  401445:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  401449:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  40144c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
  401450:	48 89 4d d0          	mov    %rcx,-0x30(%rbp)
  ScopeFn* s = malloc(sizeof(ScopeFn));
  401454:	bf 28 00 00 00       	mov    $0x28,%edi
  401459:	e8 22 f5 ff ff       	callq  400980 <malloc@plt>
  40145e:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  s->tag = FN_STMT;
  401462:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401466:	c7 00 0e 00 00 00    	movl   $0xe,(%rax)
  s->name = name;
  40146c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401470:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401474:	48 89 50 08          	mov    %rdx,0x8(%rax)
  s->nargs = nargs;
  401478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40147c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40147f:	89 50 10             	mov    %edx,0x10(%rax)
  s->args = args;
  401482:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401486:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  40148a:	48 89 50 18          	mov    %rdx,0x18(%rax)
  s->body = body;
  40148e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401492:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  401496:	48 89 50 20          	mov    %rdx,0x20(%rax)
  return (ScopeStmt*)s;
  40149a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40149e:	c9                   	leaveq 
  40149f:	c3                   	retq   

00000000004014a0 <make_ScopeSeq>:

ScopeStmt* make_ScopeSeq (ScopeStmt* a, ScopeStmt* b) {
  4014a0:	55                   	push   %rbp
  4014a1:	48 89 e5             	mov    %rsp,%rbp
  4014a4:	48 83 ec 20          	sub    $0x20,%rsp
  4014a8:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4014ac:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  ScopeSeq* s = malloc(sizeof(ScopeSeq));
  4014b0:	bf 18 00 00 00       	mov    $0x18,%edi
  4014b5:	e8 c6 f4 ff ff       	callq  400980 <malloc@plt>
  4014ba:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  s->tag = SEQ_STMT;
  4014be:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4014c2:	c7 00 0f 00 00 00    	movl   $0xf,(%rax)
  s->a = a;
  4014c8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4014cc:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  4014d0:	48 89 50 08          	mov    %rdx,0x8(%rax)
  s->b = b;
  4014d4:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4014d8:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4014dc:	48 89 50 10          	mov    %rdx,0x10(%rax)
  return (ScopeStmt*)s;
  4014e0:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4014e4:	c9                   	leaveq 
  4014e5:	c3                   	retq   

00000000004014e6 <make_ScopeExp>:

ScopeStmt* make_ScopeExp (Exp* exp) {
  4014e6:	55                   	push   %rbp
  4014e7:	48 89 e5             	mov    %rsp,%rbp
  4014ea:	48 83 ec 20          	sub    $0x20,%rsp
  4014ee:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  ScopeExp* s = malloc(sizeof(ScopeExp));
  4014f2:	bf 10 00 00 00       	mov    $0x10,%edi
  4014f7:	e8 84 f4 ff ff       	callq  400980 <malloc@plt>
  4014fc:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  s->tag = EXP_STMT;
  401500:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401504:	c7 00 10 00 00 00    	movl   $0x10,(%rax)
  s->exp = exp;
  40150a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40150e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  401512:	48 89 50 08          	mov    %rdx,0x8(%rax)
  return (ScopeStmt*)s;
  401516:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40151a:	c9                   	leaveq 
  40151b:	c3                   	retq   

000000000040151c <print_exp>:

//============================================================
//=================== PRINTING ===============================
//============================================================

void print_exp (Exp* e) {
  40151c:	55                   	push   %rbp
  40151d:	48 89 e5             	mov    %rsp,%rbp
  401520:	48 83 c4 80          	add    $0xffffffffffffff80,%rsp
  401524:	48 89 7d 88          	mov    %rdi,-0x78(%rbp)
  switch(e->tag){
  401528:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40152c:	8b 00                	mov    (%rax),%eax
  40152e:	83 f8 0c             	cmp    $0xc,%eax
  401531:	0f 87 34 04 00 00    	ja     40196b <print_exp+0x44f>
  401537:	89 c0                	mov    %eax,%eax
  401539:	48 8b 04 c5 20 3e 40 	mov    0x403e20(,%rax,8),%rax
  401540:	00 
  401541:	ff e0                	jmpq   *%rax
  case INT_EXP:{
    IntExp* e2 = (IntExp*)e;
  401543:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  401547:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    printf("%d", e2->value);
  40154b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40154f:	8b 40 04             	mov    0x4(%rax),%eax
  401552:	89 c6                	mov    %eax,%esi
  401554:	bf 98 3d 40 00       	mov    $0x403d98,%edi
  401559:	b8 00 00 00 00       	mov    $0x0,%eax
  40155e:	e8 8d f3 ff ff       	callq  4008f0 <printf@plt>
    break;
  401563:	e9 24 04 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case NULL_EXP:{
    printf("null");
  401568:	bf 9b 3d 40 00       	mov    $0x403d9b,%edi
  40156d:	b8 00 00 00 00       	mov    $0x0,%eax
  401572:	e8 79 f3 ff ff       	callq  4008f0 <printf@plt>
    break;
  401577:	e9 10 04 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case PRINTF_EXP:{
    PrintfExp* e2 = (PrintfExp*)e;
  40157c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  401580:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    printf("printf(");
  401584:	bf a0 3d 40 00       	mov    $0x403da0,%edi
  401589:	b8 00 00 00 00       	mov    $0x0,%eax
  40158e:	e8 5d f3 ff ff       	callq  4008f0 <printf@plt>
    print_string(e2->format);
  401593:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  401597:	48 8b 40 08          	mov    0x8(%rax),%rax
  40159b:	48 89 c7             	mov    %rax,%rdi
  40159e:	e8 0f f6 ff ff       	callq  400bb2 <print_string>
    for(int i=0; i<e2->nexps; i++){
  4015a3:	c7 45 90 00 00 00 00 	movl   $0x0,-0x70(%rbp)
  4015aa:	eb 33                	jmp    4015df <print_exp+0xc3>
      printf(", ");
  4015ac:	bf a8 3d 40 00       	mov    $0x403da8,%edi
  4015b1:	b8 00 00 00 00       	mov    $0x0,%eax
  4015b6:	e8 35 f3 ff ff       	callq  4008f0 <printf@plt>
      print_exp(e2->exps[i]);
  4015bb:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4015bf:	48 8b 40 18          	mov    0x18(%rax),%rax
  4015c3:	8b 55 90             	mov    -0x70(%rbp),%edx
  4015c6:	48 63 d2             	movslq %edx,%rdx
  4015c9:	48 c1 e2 03          	shl    $0x3,%rdx
  4015cd:	48 01 d0             	add    %rdx,%rax
  4015d0:	48 8b 00             	mov    (%rax),%rax
  4015d3:	48 89 c7             	mov    %rax,%rdi
  4015d6:	e8 41 ff ff ff       	callq  40151c <print_exp>
  }
  case PRINTF_EXP:{
    PrintfExp* e2 = (PrintfExp*)e;
    printf("printf(");
    print_string(e2->format);
    for(int i=0; i<e2->nexps; i++){
  4015db:	83 45 90 01          	addl   $0x1,-0x70(%rbp)
  4015df:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4015e3:	8b 40 10             	mov    0x10(%rax),%eax
  4015e6:	3b 45 90             	cmp    -0x70(%rbp),%eax
  4015e9:	7f c1                	jg     4015ac <print_exp+0x90>
      printf(", ");
      print_exp(e2->exps[i]);
    }
    printf(")");
  4015eb:	bf 29 00 00 00       	mov    $0x29,%edi
  4015f0:	e8 8b f2 ff ff       	callq  400880 <putchar@plt>
    break;
  4015f5:	e9 92 03 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case ARRAY_EXP:{
    ArrayExp* e2 = (ArrayExp*)e;
  4015fa:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4015fe:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    printf("array(");
  401602:	bf ab 3d 40 00       	mov    $0x403dab,%edi
  401607:	b8 00 00 00 00       	mov    $0x0,%eax
  40160c:	e8 df f2 ff ff       	callq  4008f0 <printf@plt>
    print_exp(e2->length);
  401611:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401615:	48 8b 40 08          	mov    0x8(%rax),%rax
  401619:	48 89 c7             	mov    %rax,%rdi
  40161c:	e8 fb fe ff ff       	callq  40151c <print_exp>
    printf(", ");
  401621:	bf a8 3d 40 00       	mov    $0x403da8,%edi
  401626:	b8 00 00 00 00       	mov    $0x0,%eax
  40162b:	e8 c0 f2 ff ff       	callq  4008f0 <printf@plt>
    print_exp(e2->init);
  401630:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  401634:	48 8b 40 10          	mov    0x10(%rax),%rax
  401638:	48 89 c7             	mov    %rax,%rdi
  40163b:	e8 dc fe ff ff       	callq  40151c <print_exp>
    printf(")");
  401640:	bf 29 00 00 00       	mov    $0x29,%edi
  401645:	e8 36 f2 ff ff       	callq  400880 <putchar@plt>
    break;
  40164a:	e9 3d 03 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case OBJECT_EXP:{
    ObjectExp* e2 = (ObjectExp*)e;
  40164f:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  401653:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    printf("object : (");
  401657:	bf b2 3d 40 00       	mov    $0x403db2,%edi
  40165c:	b8 00 00 00 00       	mov    $0x0,%eax
  401661:	e8 8a f2 ff ff       	callq  4008f0 <printf@plt>
    for(int i=0; i<e2->nslots; i++){
  401666:	c7 45 94 00 00 00 00 	movl   $0x0,-0x6c(%rbp)
  40166d:	eb 34                	jmp    4016a3 <print_exp+0x187>
      if(i > 0) printf(" ");
  40166f:	83 7d 94 00          	cmpl   $0x0,-0x6c(%rbp)
  401673:	7e 0a                	jle    40167f <print_exp+0x163>
  401675:	bf 20 00 00 00       	mov    $0x20,%edi
  40167a:	e8 01 f2 ff ff       	callq  400880 <putchar@plt>
      print_slotstmt(e2->slots[i]);
  40167f:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  401683:	48 8b 40 18          	mov    0x18(%rax),%rax
  401687:	8b 55 94             	mov    -0x6c(%rbp),%edx
  40168a:	48 63 d2             	movslq %edx,%rdx
  40168d:	48 c1 e2 03          	shl    $0x3,%rdx
  401691:	48 01 d0             	add    %rdx,%rax
  401694:	48 8b 00             	mov    (%rax),%rax
  401697:	48 89 c7             	mov    %rax,%rdi
  40169a:	e8 ef 02 00 00       	callq  40198e <print_slotstmt>
    break;
  }
  case OBJECT_EXP:{
    ObjectExp* e2 = (ObjectExp*)e;
    printf("object : (");
    for(int i=0; i<e2->nslots; i++){
  40169f:	83 45 94 01          	addl   $0x1,-0x6c(%rbp)
  4016a3:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4016a7:	8b 40 10             	mov    0x10(%rax),%eax
  4016aa:	3b 45 94             	cmp    -0x6c(%rbp),%eax
  4016ad:	7f c0                	jg     40166f <print_exp+0x153>
      if(i > 0) printf(" ");
      print_slotstmt(e2->slots[i]);
    }
    printf(")");
  4016af:	bf 29 00 00 00       	mov    $0x29,%edi
  4016b4:	e8 c7 f1 ff ff       	callq  400880 <putchar@plt>
    break;
  4016b9:	e9 ce 02 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case SLOT_EXP:{
    SlotExp* e2 = (SlotExp*)e;
  4016be:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4016c2:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    print_exp(e2->exp);
  4016c6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4016ca:	48 8b 40 10          	mov    0x10(%rax),%rax
  4016ce:	48 89 c7             	mov    %rax,%rdi
  4016d1:	e8 46 fe ff ff       	callq  40151c <print_exp>
    printf(".%s", e2->name);
  4016d6:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4016da:	48 8b 40 08          	mov    0x8(%rax),%rax
  4016de:	48 89 c6             	mov    %rax,%rsi
  4016e1:	bf bd 3d 40 00       	mov    $0x403dbd,%edi
  4016e6:	b8 00 00 00 00       	mov    $0x0,%eax
  4016eb:	e8 00 f2 ff ff       	callq  4008f0 <printf@plt>
    break;
  4016f0:	e9 97 02 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case SET_SLOT_EXP:{
    SetSlotExp* e2 = (SetSlotExp*)e;
  4016f5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4016f9:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    print_exp(e2->exp);
  4016fd:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401701:	48 8b 40 10          	mov    0x10(%rax),%rax
  401705:	48 89 c7             	mov    %rax,%rdi
  401708:	e8 0f fe ff ff       	callq  40151c <print_exp>
    printf(".%s = ", e2->name);
  40170d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401711:	48 8b 40 08          	mov    0x8(%rax),%rax
  401715:	48 89 c6             	mov    %rax,%rsi
  401718:	bf c1 3d 40 00       	mov    $0x403dc1,%edi
  40171d:	b8 00 00 00 00       	mov    $0x0,%eax
  401722:	e8 c9 f1 ff ff       	callq  4008f0 <printf@plt>
    print_exp(e2->value);
  401727:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  40172b:	48 8b 40 18          	mov    0x18(%rax),%rax
  40172f:	48 89 c7             	mov    %rax,%rdi
  401732:	e8 e5 fd ff ff       	callq  40151c <print_exp>
    break;
  401737:	e9 50 02 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case CALL_SLOT_EXP:{
    CallSlotExp* e2 = (CallSlotExp*)e;
  40173c:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  401740:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    print_exp(e2->exp);
  401744:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401748:	48 8b 40 10          	mov    0x10(%rax),%rax
  40174c:	48 89 c7             	mov    %rax,%rdi
  40174f:	e8 c8 fd ff ff       	callq  40151c <print_exp>
    printf(".%s(", e2->name);
  401754:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401758:	48 8b 40 08          	mov    0x8(%rax),%rax
  40175c:	48 89 c6             	mov    %rax,%rsi
  40175f:	bf c8 3d 40 00       	mov    $0x403dc8,%edi
  401764:	b8 00 00 00 00       	mov    $0x0,%eax
  401769:	e8 82 f1 ff ff       	callq  4008f0 <printf@plt>
    for(int i=0; i<e2->nargs; i++){
  40176e:	c7 45 98 00 00 00 00 	movl   $0x0,-0x68(%rbp)
  401775:	eb 39                	jmp    4017b0 <print_exp+0x294>
      if(i > 0) printf(", ");
  401777:	83 7d 98 00          	cmpl   $0x0,-0x68(%rbp)
  40177b:	7e 0f                	jle    40178c <print_exp+0x270>
  40177d:	bf a8 3d 40 00       	mov    $0x403da8,%edi
  401782:	b8 00 00 00 00       	mov    $0x0,%eax
  401787:	e8 64 f1 ff ff       	callq  4008f0 <printf@plt>
      print_exp(e2->args[i]);
  40178c:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  401790:	48 8b 40 20          	mov    0x20(%rax),%rax
  401794:	8b 55 98             	mov    -0x68(%rbp),%edx
  401797:	48 63 d2             	movslq %edx,%rdx
  40179a:	48 c1 e2 03          	shl    $0x3,%rdx
  40179e:	48 01 d0             	add    %rdx,%rax
  4017a1:	48 8b 00             	mov    (%rax),%rax
  4017a4:	48 89 c7             	mov    %rax,%rdi
  4017a7:	e8 70 fd ff ff       	callq  40151c <print_exp>
  }
  case CALL_SLOT_EXP:{
    CallSlotExp* e2 = (CallSlotExp*)e;
    print_exp(e2->exp);
    printf(".%s(", e2->name);
    for(int i=0; i<e2->nargs; i++){
  4017ac:	83 45 98 01          	addl   $0x1,-0x68(%rbp)
  4017b0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4017b4:	8b 40 18             	mov    0x18(%rax),%eax
  4017b7:	3b 45 98             	cmp    -0x68(%rbp),%eax
  4017ba:	7f bb                	jg     401777 <print_exp+0x25b>
      if(i > 0) printf(", ");
      print_exp(e2->args[i]);
    }
    printf(")");
  4017bc:	bf 29 00 00 00       	mov    $0x29,%edi
  4017c1:	e8 ba f0 ff ff       	callq  400880 <putchar@plt>
    break;
  4017c6:	e9 c1 01 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case CALL_EXP:{
    CallExp* e2 = (CallExp*)e;
  4017cb:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4017cf:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    printf("%s(", e2->name);
  4017d3:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4017d7:	48 8b 40 08          	mov    0x8(%rax),%rax
  4017db:	48 89 c6             	mov    %rax,%rsi
  4017de:	bf cd 3d 40 00       	mov    $0x403dcd,%edi
  4017e3:	b8 00 00 00 00       	mov    $0x0,%eax
  4017e8:	e8 03 f1 ff ff       	callq  4008f0 <printf@plt>
    for(int i=0; i<e2->nargs; i++){
  4017ed:	c7 45 9c 00 00 00 00 	movl   $0x0,-0x64(%rbp)
  4017f4:	eb 39                	jmp    40182f <print_exp+0x313>
      if(i > 0) printf(", ");
  4017f6:	83 7d 9c 00          	cmpl   $0x0,-0x64(%rbp)
  4017fa:	7e 0f                	jle    40180b <print_exp+0x2ef>
  4017fc:	bf a8 3d 40 00       	mov    $0x403da8,%edi
  401801:	b8 00 00 00 00       	mov    $0x0,%eax
  401806:	e8 e5 f0 ff ff       	callq  4008f0 <printf@plt>
      print_exp(e2->args[i]);
  40180b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40180f:	48 8b 40 18          	mov    0x18(%rax),%rax
  401813:	8b 55 9c             	mov    -0x64(%rbp),%edx
  401816:	48 63 d2             	movslq %edx,%rdx
  401819:	48 c1 e2 03          	shl    $0x3,%rdx
  40181d:	48 01 d0             	add    %rdx,%rax
  401820:	48 8b 00             	mov    (%rax),%rax
  401823:	48 89 c7             	mov    %rax,%rdi
  401826:	e8 f1 fc ff ff       	callq  40151c <print_exp>
    break;
  }
  case CALL_EXP:{
    CallExp* e2 = (CallExp*)e;
    printf("%s(", e2->name);
    for(int i=0; i<e2->nargs; i++){
  40182b:	83 45 9c 01          	addl   $0x1,-0x64(%rbp)
  40182f:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401833:	8b 40 10             	mov    0x10(%rax),%eax
  401836:	3b 45 9c             	cmp    -0x64(%rbp),%eax
  401839:	7f bb                	jg     4017f6 <print_exp+0x2da>
      if(i > 0) printf(", ");
      print_exp(e2->args[i]);
    }
    printf(")");
  40183b:	bf 29 00 00 00       	mov    $0x29,%edi
  401840:	e8 3b f0 ff ff       	callq  400880 <putchar@plt>
    break;
  401845:	e9 42 01 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case SET_EXP:{
    SetExp* e2 = (SetExp*)e;
  40184a:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40184e:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    printf("%s = ", e2->name);
  401852:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401856:	48 8b 40 08          	mov    0x8(%rax),%rax
  40185a:	48 89 c6             	mov    %rax,%rsi
  40185d:	bf d1 3d 40 00       	mov    $0x403dd1,%edi
  401862:	b8 00 00 00 00       	mov    $0x0,%eax
  401867:	e8 84 f0 ff ff       	callq  4008f0 <printf@plt>
    print_exp(e2->exp);
  40186c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401870:	48 8b 40 10          	mov    0x10(%rax),%rax
  401874:	48 89 c7             	mov    %rax,%rdi
  401877:	e8 a0 fc ff ff       	callq  40151c <print_exp>
    break;
  40187c:	e9 0b 01 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case IF_EXP:{
    IfExp* e2 = (IfExp*)e;
  401881:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  401885:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    printf("if ");
  401889:	bf d7 3d 40 00       	mov    $0x403dd7,%edi
  40188e:	b8 00 00 00 00       	mov    $0x0,%eax
  401893:	e8 58 f0 ff ff       	callq  4008f0 <printf@plt>
    print_exp(e2->pred);
  401898:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40189c:	48 8b 40 08          	mov    0x8(%rax),%rax
  4018a0:	48 89 c7             	mov    %rax,%rdi
  4018a3:	e8 74 fc ff ff       	callq  40151c <print_exp>
    printf(" : (");
  4018a8:	bf db 3d 40 00       	mov    $0x403ddb,%edi
  4018ad:	b8 00 00 00 00       	mov    $0x0,%eax
  4018b2:	e8 39 f0 ff ff       	callq  4008f0 <printf@plt>
    print_scopestmt(e2->conseq);
  4018b7:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4018bb:	48 8b 40 10          	mov    0x10(%rax),%rax
  4018bf:	48 89 c7             	mov    %rax,%rdi
  4018c2:	e8 e7 01 00 00       	callq  401aae <print_scopestmt>
    printf(") else : (");
  4018c7:	bf e0 3d 40 00       	mov    $0x403de0,%edi
  4018cc:	b8 00 00 00 00       	mov    $0x0,%eax
  4018d1:	e8 1a f0 ff ff       	callq  4008f0 <printf@plt>
    print_scopestmt(e2->alt);
  4018d6:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4018da:	48 8b 40 18          	mov    0x18(%rax),%rax
  4018de:	48 89 c7             	mov    %rax,%rdi
  4018e1:	e8 c8 01 00 00       	callq  401aae <print_scopestmt>
    printf(")");
  4018e6:	bf 29 00 00 00       	mov    $0x29,%edi
  4018eb:	e8 90 ef ff ff       	callq  400880 <putchar@plt>
    break;
  4018f0:	e9 97 00 00 00       	jmpq   40198c <print_exp+0x470>
  }
  case WHILE_EXP:{
    WhileExp* e2 = (WhileExp*)e;
  4018f5:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  4018f9:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    printf("while ");
  4018fd:	bf eb 3d 40 00       	mov    $0x403deb,%edi
  401902:	b8 00 00 00 00       	mov    $0x0,%eax
  401907:	e8 e4 ef ff ff       	callq  4008f0 <printf@plt>
    print_exp(e2->pred);
  40190c:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401910:	48 8b 40 08          	mov    0x8(%rax),%rax
  401914:	48 89 c7             	mov    %rax,%rdi
  401917:	e8 00 fc ff ff       	callq  40151c <print_exp>
    printf(" : (");
  40191c:	bf db 3d 40 00       	mov    $0x403ddb,%edi
  401921:	b8 00 00 00 00       	mov    $0x0,%eax
  401926:	e8 c5 ef ff ff       	callq  4008f0 <printf@plt>
    print_scopestmt(e2->body);
  40192b:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40192f:	48 8b 40 10          	mov    0x10(%rax),%rax
  401933:	48 89 c7             	mov    %rax,%rdi
  401936:	e8 73 01 00 00       	callq  401aae <print_scopestmt>
    printf(")");
  40193b:	bf 29 00 00 00       	mov    $0x29,%edi
  401940:	e8 3b ef ff ff       	callq  400880 <putchar@plt>
    break;
  401945:	eb 45                	jmp    40198c <print_exp+0x470>
  }
  case REF_EXP:{
    RefExp* e2 = (RefExp*)e;
  401947:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40194b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    printf("%s", e2->name);
  40194f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401953:	48 8b 40 08          	mov    0x8(%rax),%rax
  401957:	48 89 c6             	mov    %rax,%rsi
  40195a:	bf f2 3d 40 00       	mov    $0x403df2,%edi
  40195f:	b8 00 00 00 00       	mov    $0x0,%eax
  401964:	e8 87 ef ff ff       	callq  4008f0 <printf@plt>
    break;
  401969:	eb 21                	jmp    40198c <print_exp+0x470>
  }
  default:
    printf("Unrecognized Expression with tag %d\n", e->tag);
  40196b:	48 8b 45 88          	mov    -0x78(%rbp),%rax
  40196f:	8b 00                	mov    (%rax),%eax
  401971:	89 c6                	mov    %eax,%esi
  401973:	bf f8 3d 40 00       	mov    $0x403df8,%edi
  401978:	b8 00 00 00 00       	mov    $0x0,%eax
  40197d:	e8 6e ef ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  401982:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  401987:	e8 14 f0 ff ff       	callq  4009a0 <exit@plt>
  }
}
  40198c:	c9                   	leaveq 
  40198d:	c3                   	retq   

000000000040198e <print_slotstmt>:

void print_slotstmt (SlotStmt* s) {
  40198e:	55                   	push   %rbp
  40198f:	48 89 e5             	mov    %rsp,%rbp
  401992:	48 83 ec 30          	sub    $0x30,%rsp
  401996:	48 89 7d d8          	mov    %rdi,-0x28(%rbp)
  switch(s->tag){
  40199a:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40199e:	8b 00                	mov    (%rax),%eax
  4019a0:	83 f8 0d             	cmp    $0xd,%eax
  4019a3:	74 0a                	je     4019af <print_slotstmt+0x21>
  4019a5:	83 f8 0e             	cmp    $0xe,%eax
  4019a8:	74 3c                	je     4019e6 <print_slotstmt+0x58>
  4019aa:	e9 dc 00 00 00       	jmpq   401a8b <print_slotstmt+0xfd>
  case VAR_STMT:{
    SlotVar* s2 = (SlotVar*)s;
  4019af:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4019b3:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    printf("var %s = ", s2->name);
  4019b7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4019bb:	48 8b 40 08          	mov    0x8(%rax),%rax
  4019bf:	48 89 c6             	mov    %rax,%rsi
  4019c2:	bf 88 3e 40 00       	mov    $0x403e88,%edi
  4019c7:	b8 00 00 00 00       	mov    $0x0,%eax
  4019cc:	e8 1f ef ff ff       	callq  4008f0 <printf@plt>
    print_exp(s2->exp);
  4019d1:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4019d5:	48 8b 40 10          	mov    0x10(%rax),%rax
  4019d9:	48 89 c7             	mov    %rax,%rdi
  4019dc:	e8 3b fb ff ff       	callq  40151c <print_exp>
    break;
  4019e1:	e9 c6 00 00 00       	jmpq   401aac <print_slotstmt+0x11e>
  }
  case FN_STMT:{
    SlotMethod* s2 = (SlotMethod*)s;
  4019e6:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  4019ea:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    printf("method %s (", s2->name);
  4019ee:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4019f2:	48 8b 40 08          	mov    0x8(%rax),%rax
  4019f6:	48 89 c6             	mov    %rax,%rsi
  4019f9:	bf 92 3e 40 00       	mov    $0x403e92,%edi
  4019fe:	b8 00 00 00 00       	mov    $0x0,%eax
  401a03:	e8 e8 ee ff ff       	callq  4008f0 <printf@plt>
    for(int i=0; i<s2->nargs; i++){
  401a08:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%rbp)
  401a0f:	eb 43                	jmp    401a54 <print_slotstmt+0xc6>
      if(i>0) printf(", ");
  401a11:	83 7d ec 00          	cmpl   $0x0,-0x14(%rbp)
  401a15:	7e 0f                	jle    401a26 <print_slotstmt+0x98>
  401a17:	bf a8 3d 40 00       	mov    $0x403da8,%edi
  401a1c:	b8 00 00 00 00       	mov    $0x0,%eax
  401a21:	e8 ca ee ff ff       	callq  4008f0 <printf@plt>
      printf("%s", s2->args[i]);
  401a26:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401a2a:	48 8b 40 18          	mov    0x18(%rax),%rax
  401a2e:	8b 55 ec             	mov    -0x14(%rbp),%edx
  401a31:	48 63 d2             	movslq %edx,%rdx
  401a34:	48 c1 e2 03          	shl    $0x3,%rdx
  401a38:	48 01 d0             	add    %rdx,%rax
  401a3b:	48 8b 00             	mov    (%rax),%rax
  401a3e:	48 89 c6             	mov    %rax,%rsi
  401a41:	bf f2 3d 40 00       	mov    $0x403df2,%edi
  401a46:	b8 00 00 00 00       	mov    $0x0,%eax
  401a4b:	e8 a0 ee ff ff       	callq  4008f0 <printf@plt>
    break;
  }
  case FN_STMT:{
    SlotMethod* s2 = (SlotMethod*)s;
    printf("method %s (", s2->name);
    for(int i=0; i<s2->nargs; i++){
  401a50:	83 45 ec 01          	addl   $0x1,-0x14(%rbp)
  401a54:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401a58:	8b 40 10             	mov    0x10(%rax),%eax
  401a5b:	3b 45 ec             	cmp    -0x14(%rbp),%eax
  401a5e:	7f b1                	jg     401a11 <print_slotstmt+0x83>
      if(i>0) printf(", ");
      printf("%s", s2->args[i]);
    }
    printf(") : (");
  401a60:	bf 9e 3e 40 00       	mov    $0x403e9e,%edi
  401a65:	b8 00 00 00 00       	mov    $0x0,%eax
  401a6a:	e8 81 ee ff ff       	callq  4008f0 <printf@plt>
    print_scopestmt(s2->body);
  401a6f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401a73:	48 8b 40 20          	mov    0x20(%rax),%rax
  401a77:	48 89 c7             	mov    %rax,%rdi
  401a7a:	e8 2f 00 00 00       	callq  401aae <print_scopestmt>
    printf(")");
  401a7f:	bf 29 00 00 00       	mov    $0x29,%edi
  401a84:	e8 f7 ed ff ff       	callq  400880 <putchar@plt>
    break;
  401a89:	eb 21                	jmp    401aac <print_slotstmt+0x11e>
  }
  default:
    printf("Unrecognized slot statement with tag %d\n", s->tag);
  401a8b:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  401a8f:	8b 00                	mov    (%rax),%eax
  401a91:	89 c6                	mov    %eax,%esi
  401a93:	bf a8 3e 40 00       	mov    $0x403ea8,%edi
  401a98:	b8 00 00 00 00       	mov    $0x0,%eax
  401a9d:	e8 4e ee ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  401aa2:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  401aa7:	e8 f4 ee ff ff       	callq  4009a0 <exit@plt>
  }
}
  401aac:	c9                   	leaveq 
  401aad:	c3                   	retq   

0000000000401aae <print_scopestmt>:

void print_scopestmt (ScopeStmt* s) {
  401aae:	55                   	push   %rbp
  401aaf:	48 89 e5             	mov    %rsp,%rbp
  401ab2:	48 83 ec 40          	sub    $0x40,%rsp
  401ab6:	48 89 7d c8          	mov    %rdi,-0x38(%rbp)
  switch(s->tag){
  401aba:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401abe:	8b 00                	mov    (%rax),%eax
  401ac0:	83 f8 0e             	cmp    $0xe,%eax
  401ac3:	74 5d                	je     401b22 <print_scopestmt+0x74>
  401ac5:	83 f8 0e             	cmp    $0xe,%eax
  401ac8:	77 0a                	ja     401ad4 <print_scopestmt+0x26>
  401aca:	83 f8 0d             	cmp    $0xd,%eax
  401acd:	74 1c                	je     401aeb <print_scopestmt+0x3d>
  401acf:	e9 41 01 00 00       	jmpq   401c15 <print_scopestmt+0x167>
  401ad4:	83 f8 0f             	cmp    $0xf,%eax
  401ad7:	0f 84 ea 00 00 00    	je     401bc7 <print_scopestmt+0x119>
  401add:	83 f8 10             	cmp    $0x10,%eax
  401ae0:	0f 84 15 01 00 00    	je     401bfb <print_scopestmt+0x14d>
  401ae6:	e9 2a 01 00 00       	jmpq   401c15 <print_scopestmt+0x167>
  case VAR_STMT:{
    ScopeVar* s2 = (ScopeVar*)s;
  401aeb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401aef:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    printf("var %s = ", s2->name);
  401af3:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401af7:	48 8b 40 08          	mov    0x8(%rax),%rax
  401afb:	48 89 c6             	mov    %rax,%rsi
  401afe:	bf 88 3e 40 00       	mov    $0x403e88,%edi
  401b03:	b8 00 00 00 00       	mov    $0x0,%eax
  401b08:	e8 e3 ed ff ff       	callq  4008f0 <printf@plt>
    print_exp(s2->exp);
  401b0d:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  401b11:	48 8b 40 10          	mov    0x10(%rax),%rax
  401b15:	48 89 c7             	mov    %rax,%rdi
  401b18:	e8 ff f9 ff ff       	callq  40151c <print_exp>
    break;
  401b1d:	e9 14 01 00 00       	jmpq   401c36 <print_scopestmt+0x188>
  }
  case FN_STMT:{
    ScopeFn* s2 = (ScopeFn*)s;
  401b22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401b26:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    printf("defn %s (", s2->name);
  401b2a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401b2e:	48 8b 40 08          	mov    0x8(%rax),%rax
  401b32:	48 89 c6             	mov    %rax,%rsi
  401b35:	bf d1 3e 40 00       	mov    $0x403ed1,%edi
  401b3a:	b8 00 00 00 00       	mov    $0x0,%eax
  401b3f:	e8 ac ed ff ff       	callq  4008f0 <printf@plt>
    for(int i=0; i<s2->nargs; i++){
  401b44:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%rbp)
  401b4b:	eb 43                	jmp    401b90 <print_scopestmt+0xe2>
      if(i>0) printf(", ");
  401b4d:	83 7d dc 00          	cmpl   $0x0,-0x24(%rbp)
  401b51:	7e 0f                	jle    401b62 <print_scopestmt+0xb4>
  401b53:	bf a8 3d 40 00       	mov    $0x403da8,%edi
  401b58:	b8 00 00 00 00       	mov    $0x0,%eax
  401b5d:	e8 8e ed ff ff       	callq  4008f0 <printf@plt>
      printf("%s", s2->args[i]);
  401b62:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401b66:	48 8b 40 18          	mov    0x18(%rax),%rax
  401b6a:	8b 55 dc             	mov    -0x24(%rbp),%edx
  401b6d:	48 63 d2             	movslq %edx,%rdx
  401b70:	48 c1 e2 03          	shl    $0x3,%rdx
  401b74:	48 01 d0             	add    %rdx,%rax
  401b77:	48 8b 00             	mov    (%rax),%rax
  401b7a:	48 89 c6             	mov    %rax,%rsi
  401b7d:	bf f2 3d 40 00       	mov    $0x403df2,%edi
  401b82:	b8 00 00 00 00       	mov    $0x0,%eax
  401b87:	e8 64 ed ff ff       	callq  4008f0 <printf@plt>
    break;
  }
  case FN_STMT:{
    ScopeFn* s2 = (ScopeFn*)s;
    printf("defn %s (", s2->name);
    for(int i=0; i<s2->nargs; i++){
  401b8c:	83 45 dc 01          	addl   $0x1,-0x24(%rbp)
  401b90:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401b94:	8b 40 10             	mov    0x10(%rax),%eax
  401b97:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  401b9a:	7f b1                	jg     401b4d <print_scopestmt+0x9f>
      if(i>0) printf(", ");
      printf("%s", s2->args[i]);
    }
    printf(") : (");
  401b9c:	bf 9e 3e 40 00       	mov    $0x403e9e,%edi
  401ba1:	b8 00 00 00 00       	mov    $0x0,%eax
  401ba6:	e8 45 ed ff ff       	callq  4008f0 <printf@plt>
    print_scopestmt(s2->body);
  401bab:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401baf:	48 8b 40 20          	mov    0x20(%rax),%rax
  401bb3:	48 89 c7             	mov    %rax,%rdi
  401bb6:	e8 f3 fe ff ff       	callq  401aae <print_scopestmt>
    printf(")");
  401bbb:	bf 29 00 00 00       	mov    $0x29,%edi
  401bc0:	e8 bb ec ff ff       	callq  400880 <putchar@plt>
    break;
  401bc5:	eb 6f                	jmp    401c36 <print_scopestmt+0x188>
  }
  case SEQ_STMT:{
    ScopeSeq* s2 = (ScopeSeq*)s;
  401bc7:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401bcb:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    print_scopestmt(s2->a);
  401bcf:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401bd3:	48 8b 40 08          	mov    0x8(%rax),%rax
  401bd7:	48 89 c7             	mov    %rax,%rdi
  401bda:	e8 cf fe ff ff       	callq  401aae <print_scopestmt>
    printf(" ");
  401bdf:	bf 20 00 00 00       	mov    $0x20,%edi
  401be4:	e8 97 ec ff ff       	callq  400880 <putchar@plt>
    print_scopestmt(s2->b);
  401be9:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  401bed:	48 8b 40 10          	mov    0x10(%rax),%rax
  401bf1:	48 89 c7             	mov    %rax,%rdi
  401bf4:	e8 b5 fe ff ff       	callq  401aae <print_scopestmt>
    break;
  401bf9:	eb 3b                	jmp    401c36 <print_scopestmt+0x188>
  }
  case EXP_STMT:{
    ScopeExp* s2 = (ScopeExp*)s;
  401bfb:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401bff:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    print_exp(s2->exp);
  401c03:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  401c07:	48 8b 40 08          	mov    0x8(%rax),%rax
  401c0b:	48 89 c7             	mov    %rax,%rdi
  401c0e:	e8 09 f9 ff ff       	callq  40151c <print_exp>
    break;
  401c13:	eb 21                	jmp    401c36 <print_scopestmt+0x188>
  }
  default:
    printf("Unrecognized scope statement with tag %d\n", s->tag);
  401c15:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  401c19:	8b 00                	mov    (%rax),%eax
  401c1b:	89 c6                	mov    %eax,%esi
  401c1d:	bf e0 3e 40 00       	mov    $0x403ee0,%edi
  401c22:	b8 00 00 00 00       	mov    $0x0,%eax
  401c27:	e8 c4 ec ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  401c2c:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  401c31:	e8 6a ed ff ff       	callq  4009a0 <exit@plt>
  }
}
  401c36:	c9                   	leaveq 
  401c37:	c3                   	retq   

0000000000401c38 <read_byte>:
//=================== LOADING ================================
//============================================================

static FILE* inputfile;

static char read_byte () {
  401c38:	55                   	push   %rbp
  401c39:	48 89 e5             	mov    %rsp,%rbp
  401c3c:	48 83 ec 10          	sub    $0x10,%rsp
  int i = fgetc(inputfile);
  401c40:	48 8b 05 a9 44 20 00 	mov    0x2044a9(%rip),%rax        # 6060f0 <inputfile>
  401c47:	48 89 c7             	mov    %rax,%rdi
  401c4a:	e8 c1 ec ff ff       	callq  400910 <fgetc@plt>
  401c4f:	89 45 fc             	mov    %eax,-0x4(%rbp)
  if(i < 0) {
  401c52:	83 7d fc 00          	cmpl   $0x0,-0x4(%rbp)
  401c56:	79 14                	jns    401c6c <read_byte+0x34>
    printf("Unexpected end of file.\n");
  401c58:	bf 0a 3f 40 00       	mov    $0x403f0a,%edi
  401c5d:	e8 3e ec ff ff       	callq  4008a0 <puts@plt>
    exit(-1);
  401c62:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  401c67:	e8 34 ed ff ff       	callq  4009a0 <exit@plt>
  }
  return (char)i;
  401c6c:	8b 45 fc             	mov    -0x4(%rbp),%eax
}
  401c6f:	c9                   	leaveq 
  401c70:	c3                   	retq   

0000000000401c71 <read_int>:
static int read_int () {
  401c71:	55                   	push   %rbp
  401c72:	48 89 e5             	mov    %rsp,%rbp
  401c75:	48 83 ec 10          	sub    $0x10,%rsp
  unsigned char b1 = read_byte();
  401c79:	b8 00 00 00 00       	mov    $0x0,%eax
  401c7e:	e8 b5 ff ff ff       	callq  401c38 <read_byte>
  401c83:	88 45 fc             	mov    %al,-0x4(%rbp)
  unsigned char b2 = read_byte();
  401c86:	b8 00 00 00 00       	mov    $0x0,%eax
  401c8b:	e8 a8 ff ff ff       	callq  401c38 <read_byte>
  401c90:	88 45 fd             	mov    %al,-0x3(%rbp)
  unsigned char b3 = read_byte();
  401c93:	b8 00 00 00 00       	mov    $0x0,%eax
  401c98:	e8 9b ff ff ff       	callq  401c38 <read_byte>
  401c9d:	88 45 fe             	mov    %al,-0x2(%rbp)
  unsigned char b4 = read_byte();
  401ca0:	b8 00 00 00 00       	mov    $0x0,%eax
  401ca5:	e8 8e ff ff ff       	callq  401c38 <read_byte>
  401caa:	88 45 ff             	mov    %al,-0x1(%rbp)
  return (int)b1 + ((int)b2 << 8) + ((int)b3 << 16) + ((int)b4 << 24);
  401cad:	0f b6 45 fc          	movzbl -0x4(%rbp),%eax
  401cb1:	0f b6 55 fd          	movzbl -0x3(%rbp),%edx
  401cb5:	c1 e2 08             	shl    $0x8,%edx
  401cb8:	01 c2                	add    %eax,%edx
  401cba:	0f b6 45 fe          	movzbl -0x2(%rbp),%eax
  401cbe:	c1 e0 10             	shl    $0x10,%eax
  401cc1:	01 c2                	add    %eax,%edx
  401cc3:	0f b6 45 ff          	movzbl -0x1(%rbp),%eax
  401cc7:	c1 e0 18             	shl    $0x18,%eax
  401cca:	01 d0                	add    %edx,%eax
}
  401ccc:	c9                   	leaveq 
  401ccd:	c3                   	retq   

0000000000401cce <read_string>:
static char* read_string () {
  401cce:	55                   	push   %rbp
  401ccf:	48 89 e5             	mov    %rsp,%rbp
  401cd2:	53                   	push   %rbx
  401cd3:	48 83 ec 18          	sub    $0x18,%rsp
  int len = read_int();
  401cd7:	b8 00 00 00 00       	mov    $0x0,%eax
  401cdc:	e8 90 ff ff ff       	callq  401c71 <read_int>
  401ce1:	89 45 e4             	mov    %eax,-0x1c(%rbp)
  char* str = malloc(len + 1);
  401ce4:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401ce7:	83 c0 01             	add    $0x1,%eax
  401cea:	48 98                	cltq   
  401cec:	48 89 c7             	mov    %rax,%rdi
  401cef:	e8 8c ec ff ff       	callq  400980 <malloc@plt>
  401cf4:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  for(int i=0; i<len; i++)
  401cf8:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%rbp)
  401cff:	eb 1e                	jmp    401d1f <read_string+0x51>
    str[i] = read_byte();
  401d01:	8b 45 e0             	mov    -0x20(%rbp),%eax
  401d04:	48 63 d0             	movslq %eax,%rdx
  401d07:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d0b:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  401d0f:	b8 00 00 00 00       	mov    $0x0,%eax
  401d14:	e8 1f ff ff ff       	callq  401c38 <read_byte>
  401d19:	88 03                	mov    %al,(%rbx)
  return (int)b1 + ((int)b2 << 8) + ((int)b3 << 16) + ((int)b4 << 24);
}
static char* read_string () {
  int len = read_int();
  char* str = malloc(len + 1);
  for(int i=0; i<len; i++)
  401d1b:	83 45 e0 01          	addl   $0x1,-0x20(%rbp)
  401d1f:	8b 45 e0             	mov    -0x20(%rbp),%eax
  401d22:	3b 45 e4             	cmp    -0x1c(%rbp),%eax
  401d25:	7c da                	jl     401d01 <read_string+0x33>
    str[i] = read_byte();
  str[len] = 0;
  401d27:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401d2a:	48 63 d0             	movslq %eax,%rdx
  401d2d:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d31:	48 01 d0             	add    %rdx,%rax
  401d34:	c6 00 00             	movb   $0x0,(%rax)
  return str;
  401d37:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  401d3b:	48 83 c4 18          	add    $0x18,%rsp
  401d3f:	5b                   	pop    %rbx
  401d40:	5d                   	pop    %rbp
  401d41:	c3                   	retq   

0000000000401d42 <read_strings>:

//Lists
static char** read_strings (int n) {
  401d42:	55                   	push   %rbp
  401d43:	48 89 e5             	mov    %rsp,%rbp
  401d46:	53                   	push   %rbx
  401d47:	48 83 ec 28          	sub    $0x28,%rsp
  401d4b:	89 7d dc             	mov    %edi,-0x24(%rbp)
  char** strs = malloc(sizeof(char*)*n);
  401d4e:	8b 45 dc             	mov    -0x24(%rbp),%eax
  401d51:	48 98                	cltq   
  401d53:	48 c1 e0 03          	shl    $0x3,%rax
  401d57:	48 89 c7             	mov    %rax,%rdi
  401d5a:	e8 21 ec ff ff       	callq  400980 <malloc@plt>
  401d5f:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  for(int i=0; i<n; i++)
  401d63:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  401d6a:	eb 26                	jmp    401d92 <read_strings+0x50>
    strs[i] = read_string();
  401d6c:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401d6f:	48 98                	cltq   
  401d71:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  401d78:	00 
  401d79:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401d7d:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  401d81:	b8 00 00 00 00       	mov    $0x0,%eax
  401d86:	e8 43 ff ff ff       	callq  401cce <read_string>
  401d8b:	48 89 03             	mov    %rax,(%rbx)
}

//Lists
static char** read_strings (int n) {
  char** strs = malloc(sizeof(char*)*n);
  for(int i=0; i<n; i++)
  401d8e:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  401d92:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401d95:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  401d98:	7c d2                	jl     401d6c <read_strings+0x2a>
    strs[i] = read_string();
  return strs;
  401d9a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  401d9e:	48 83 c4 28          	add    $0x28,%rsp
  401da2:	5b                   	pop    %rbx
  401da3:	5d                   	pop    %rbp
  401da4:	c3                   	retq   

0000000000401da5 <read_exps>:
static Exp** read_exps (int n) {
  401da5:	55                   	push   %rbp
  401da6:	48 89 e5             	mov    %rsp,%rbp
  401da9:	53                   	push   %rbx
  401daa:	48 83 ec 28          	sub    $0x28,%rsp
  401dae:	89 7d dc             	mov    %edi,-0x24(%rbp)
  Exp** exps = malloc(sizeof(Exp*)*n);
  401db1:	8b 45 dc             	mov    -0x24(%rbp),%eax
  401db4:	48 98                	cltq   
  401db6:	48 c1 e0 03          	shl    $0x3,%rax
  401dba:	48 89 c7             	mov    %rax,%rdi
  401dbd:	e8 be eb ff ff       	callq  400980 <malloc@plt>
  401dc2:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  for(int i=0; i<n; i++)
  401dc6:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  401dcd:	eb 26                	jmp    401df5 <read_exps+0x50>
    exps[i] = read_exp();
  401dcf:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401dd2:	48 98                	cltq   
  401dd4:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  401ddb:	00 
  401ddc:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401de0:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  401de4:	b8 00 00 00 00       	mov    $0x0,%eax
  401de9:	e8 7d 00 00 00       	callq  401e6b <read_exp>
  401dee:	48 89 03             	mov    %rax,(%rbx)
    strs[i] = read_string();
  return strs;
}
static Exp** read_exps (int n) {
  Exp** exps = malloc(sizeof(Exp*)*n);
  for(int i=0; i<n; i++)
  401df1:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  401df5:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401df8:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  401dfb:	7c d2                	jl     401dcf <read_exps+0x2a>
    exps[i] = read_exp();
  return exps;
  401dfd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  401e01:	48 83 c4 28          	add    $0x28,%rsp
  401e05:	5b                   	pop    %rbx
  401e06:	5d                   	pop    %rbp
  401e07:	c3                   	retq   

0000000000401e08 <read_slots>:
static SlotStmt** read_slots (int n) {
  401e08:	55                   	push   %rbp
  401e09:	48 89 e5             	mov    %rsp,%rbp
  401e0c:	53                   	push   %rbx
  401e0d:	48 83 ec 28          	sub    $0x28,%rsp
  401e11:	89 7d dc             	mov    %edi,-0x24(%rbp)
  SlotStmt** slots = malloc(sizeof(SlotStmt*)*n);
  401e14:	8b 45 dc             	mov    -0x24(%rbp),%eax
  401e17:	48 98                	cltq   
  401e19:	48 c1 e0 03          	shl    $0x3,%rax
  401e1d:	48 89 c7             	mov    %rax,%rdi
  401e20:	e8 5b eb ff ff       	callq  400980 <malloc@plt>
  401e25:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
  for(int i=0; i<n; i++)
  401e29:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%rbp)
  401e30:	eb 26                	jmp    401e58 <read_slots+0x50>
    slots[i] = read_slot();
  401e32:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401e35:	48 98                	cltq   
  401e37:	48 8d 14 c5 00 00 00 	lea    0x0(,%rax,8),%rdx
  401e3e:	00 
  401e3f:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  401e43:	48 8d 1c 02          	lea    (%rdx,%rax,1),%rbx
  401e47:	b8 00 00 00 00       	mov    $0x0,%eax
  401e4c:	e8 88 03 00 00       	callq  4021d9 <read_slot>
  401e51:	48 89 03             	mov    %rax,(%rbx)
    exps[i] = read_exp();
  return exps;
}
static SlotStmt** read_slots (int n) {
  SlotStmt** slots = malloc(sizeof(SlotStmt*)*n);
  for(int i=0; i<n; i++)
  401e54:	83 45 e4 01          	addl   $0x1,-0x1c(%rbp)
  401e58:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  401e5b:	3b 45 dc             	cmp    -0x24(%rbp),%eax
  401e5e:	7c d2                	jl     401e32 <read_slots+0x2a>
    slots[i] = read_slot();
  return slots;
  401e60:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
}
  401e64:	48 83 c4 28          	add    $0x28,%rsp
  401e68:	5b                   	pop    %rbx
  401e69:	5d                   	pop    %rbp
  401e6a:	c3                   	retq   

0000000000401e6b <read_exp>:

Exp* read_exp () {
  401e6b:	55                   	push   %rbp
  401e6c:	48 89 e5             	mov    %rsp,%rbp
  401e6f:	48 81 ec e0 00 00 00 	sub    $0xe0,%rsp
  AstTag tag = read_int();
  401e76:	b8 00 00 00 00       	mov    $0x0,%eax
  401e7b:	e8 f1 fd ff ff       	callq  401c71 <read_int>
  401e80:	89 85 28 ff ff ff    	mov    %eax,-0xd8(%rbp)
  switch(tag){
  401e86:	83 bd 28 ff ff ff 0c 	cmpl   $0xc,-0xd8(%rbp)
  401e8d:	0f 87 23 03 00 00    	ja     4021b6 <read_exp+0x34b>
  401e93:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
  401e99:	48 8b 04 c5 50 3f 40 	mov    0x403f50(,%rax,8),%rax
  401ea0:	00 
  401ea1:	ff e0                	jmpq   *%rax
  case INT_EXP:{
    int value = read_int();
  401ea3:	b8 00 00 00 00       	mov    $0x0,%eax
  401ea8:	e8 c4 fd ff ff       	callq  401c71 <read_int>
  401ead:	89 85 2c ff ff ff    	mov    %eax,-0xd4(%rbp)
    return make_IntExp(value);
  401eb3:	8b 85 2c ff ff ff    	mov    -0xd4(%rbp),%eax
  401eb9:	89 c7                	mov    %eax,%edi
  401ebb:	e8 df f0 ff ff       	callq  400f9f <make_IntExp>
  401ec0:	e9 12 03 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case NULL_EXP:{
    return make_NullExp();
  401ec5:	b8 00 00 00 00       	mov    $0x0,%eax
  401eca:	e8 03 f1 ff ff       	callq  400fd2 <make_NullExp>
  401ecf:	e9 03 03 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case PRINTF_EXP:{
    char* format = read_string();
  401ed4:	b8 00 00 00 00       	mov    $0x0,%eax
  401ed9:	e8 f0 fd ff ff       	callq  401cce <read_string>
  401ede:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    int nexps = read_int();
  401ee5:	b8 00 00 00 00       	mov    $0x0,%eax
  401eea:	e8 82 fd ff ff       	callq  401c71 <read_int>
  401eef:	89 85 30 ff ff ff    	mov    %eax,-0xd0(%rbp)
    Exp** exps = read_exps(nexps);
  401ef5:	8b 85 30 ff ff ff    	mov    -0xd0(%rbp),%eax
  401efb:	89 c7                	mov    %eax,%edi
  401efd:	e8 a3 fe ff ff       	callq  401da5 <read_exps>
  401f02:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
    return make_PrintfExp(format, nexps, exps);
  401f09:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  401f10:	8b 8d 30 ff ff ff    	mov    -0xd0(%rbp),%ecx
  401f16:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  401f1d:	89 ce                	mov    %ecx,%esi
  401f1f:	48 89 c7             	mov    %rax,%rdi
  401f22:	e8 d1 f0 ff ff       	callq  400ff8 <make_PrintfExp>
  401f27:	e9 ab 02 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case ARRAY_EXP:{
    Exp* length = read_exp();
  401f2c:	b8 00 00 00 00       	mov    $0x0,%eax
  401f31:	e8 35 ff ff ff       	callq  401e6b <read_exp>
  401f36:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
    Exp* init = read_exp();
  401f3d:	b8 00 00 00 00       	mov    $0x0,%eax
  401f42:	e8 24 ff ff ff       	callq  401e6b <read_exp>
  401f47:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
    return make_ArrayExp(length, init);      
  401f4e:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  401f55:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  401f5c:	48 89 d6             	mov    %rdx,%rsi
  401f5f:	48 89 c7             	mov    %rax,%rdi
  401f62:	e8 e4 f0 ff ff       	callq  40104b <make_ArrayExp>
  401f67:	e9 6b 02 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case OBJECT_EXP:{
    Exp* parent = read_exp();
  401f6c:	b8 00 00 00 00       	mov    $0x0,%eax
  401f71:	e8 f5 fe ff ff       	callq  401e6b <read_exp>
  401f76:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    int nslots = read_int();
  401f7d:	b8 00 00 00 00       	mov    $0x0,%eax
  401f82:	e8 ea fc ff ff       	callq  401c71 <read_int>
  401f87:	89 85 34 ff ff ff    	mov    %eax,-0xcc(%rbp)
    SlotStmt** slots = read_slots(nslots);
  401f8d:	8b 85 34 ff ff ff    	mov    -0xcc(%rbp),%eax
  401f93:	89 c7                	mov    %eax,%edi
  401f95:	e8 6e fe ff ff       	callq  401e08 <read_slots>
  401f9a:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    return make_ObjectExp(parent, nslots, slots);
  401fa1:	48 8b 95 68 ff ff ff 	mov    -0x98(%rbp),%rdx
  401fa8:	8b 8d 34 ff ff ff    	mov    -0xcc(%rbp),%ecx
  401fae:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  401fb5:	89 ce                	mov    %ecx,%esi
  401fb7:	48 89 c7             	mov    %rax,%rdi
  401fba:	e8 d2 f0 ff ff       	callq  401091 <make_ObjectExp>
  401fbf:	e9 13 02 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case SLOT_EXP:{
    char* name = read_string();
  401fc4:	b8 00 00 00 00       	mov    $0x0,%eax
  401fc9:	e8 00 fd ff ff       	callq  401cce <read_string>
  401fce:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    Exp* exp = read_exp();
  401fd5:	b8 00 00 00 00       	mov    $0x0,%eax
  401fda:	e8 8c fe ff ff       	callq  401e6b <read_exp>
  401fdf:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    return make_SlotExp(name, exp);
  401fe6:	48 8b 95 78 ff ff ff 	mov    -0x88(%rbp),%rdx
  401fed:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  401ff4:	48 89 d6             	mov    %rdx,%rsi
  401ff7:	48 89 c7             	mov    %rax,%rdi
  401ffa:	e8 e5 f0 ff ff       	callq  4010e4 <make_SlotExp>
  401fff:	e9 d3 01 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case SET_SLOT_EXP:{
    char* name = read_string();
  402004:	b8 00 00 00 00       	mov    $0x0,%eax
  402009:	e8 c0 fc ff ff       	callq  401cce <read_string>
  40200e:	48 89 45 80          	mov    %rax,-0x80(%rbp)
    Exp* exp = read_exp();
  402012:	b8 00 00 00 00       	mov    $0x0,%eax
  402017:	e8 4f fe ff ff       	callq  401e6b <read_exp>
  40201c:	48 89 45 88          	mov    %rax,-0x78(%rbp)
    Exp* value = read_exp();
  402020:	b8 00 00 00 00       	mov    $0x0,%eax
  402025:	e8 41 fe ff ff       	callq  401e6b <read_exp>
  40202a:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    return make_SetSlotExp(name, exp, value);
  40202e:	48 8b 55 90          	mov    -0x70(%rbp),%rdx
  402032:	48 8b 4d 88          	mov    -0x78(%rbp),%rcx
  402036:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40203a:	48 89 ce             	mov    %rcx,%rsi
  40203d:	48 89 c7             	mov    %rax,%rdi
  402040:	e8 e5 f0 ff ff       	callq  40112a <make_SetSlotExp>
  402045:	e9 8d 01 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case CALL_SLOT_EXP:{
    char* name = read_string();
  40204a:	b8 00 00 00 00       	mov    $0x0,%eax
  40204f:	e8 7a fc ff ff       	callq  401cce <read_string>
  402054:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    Exp* exp = read_exp();
  402058:	b8 00 00 00 00       	mov    $0x0,%eax
  40205d:	e8 09 fe ff ff       	callq  401e6b <read_exp>
  402062:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    int nargs = read_int();
  402066:	b8 00 00 00 00       	mov    $0x0,%eax
  40206b:	e8 01 fc ff ff       	callq  401c71 <read_int>
  402070:	89 85 38 ff ff ff    	mov    %eax,-0xc8(%rbp)
    Exp** args = read_exps(nargs);
  402076:	8b 85 38 ff ff ff    	mov    -0xc8(%rbp),%eax
  40207c:	89 c7                	mov    %eax,%edi
  40207e:	e8 22 fd ff ff       	callq  401da5 <read_exps>
  402083:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    return make_CallSlotExp(name, exp, nargs, args);
  402087:	48 8b 4d a8          	mov    -0x58(%rbp),%rcx
  40208b:	8b 95 38 ff ff ff    	mov    -0xc8(%rbp),%edx
  402091:	48 8b 75 a0          	mov    -0x60(%rbp),%rsi
  402095:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  402099:	48 89 c7             	mov    %rax,%rdi
  40209c:	e8 df f0 ff ff       	callq  401180 <make_CallSlotExp>
  4020a1:	e9 31 01 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case CALL_EXP:{
    char* name = read_string();
  4020a6:	b8 00 00 00 00       	mov    $0x0,%eax
  4020ab:	e8 1e fc ff ff       	callq  401cce <read_string>
  4020b0:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    int nargs = read_int();
  4020b4:	b8 00 00 00 00       	mov    $0x0,%eax
  4020b9:	e8 b3 fb ff ff       	callq  401c71 <read_int>
  4020be:	89 85 3c ff ff ff    	mov    %eax,-0xc4(%rbp)
    Exp** args = read_exps(nargs);
  4020c4:	8b 85 3c ff ff ff    	mov    -0xc4(%rbp),%eax
  4020ca:	89 c7                	mov    %eax,%edi
  4020cc:	e8 d4 fc ff ff       	callq  401da5 <read_exps>
  4020d1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    return make_CallExp(name, nargs, args);
  4020d5:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4020d9:	8b 8d 3c ff ff ff    	mov    -0xc4(%rbp),%ecx
  4020df:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4020e3:	89 ce                	mov    %ecx,%esi
  4020e5:	48 89 c7             	mov    %rax,%rdi
  4020e8:	e8 f6 f0 ff ff       	callq  4011e3 <make_CallExp>
  4020ed:	e9 e5 00 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case SET_EXP:{
    char* name = read_string();
  4020f2:	b8 00 00 00 00       	mov    $0x0,%eax
  4020f7:	e8 d2 fb ff ff       	callq  401cce <read_string>
  4020fc:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    Exp* exp = read_exp();
  402100:	b8 00 00 00 00       	mov    $0x0,%eax
  402105:	e8 61 fd ff ff       	callq  401e6b <read_exp>
  40210a:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    return make_SetExp(name, exp);
  40210e:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402112:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  402116:	48 89 d6             	mov    %rdx,%rsi
  402119:	48 89 c7             	mov    %rax,%rdi
  40211c:	e8 15 f1 ff ff       	callq  401236 <make_SetExp>
  402121:	e9 b1 00 00 00       	jmpq   4021d7 <read_exp+0x36c>
  }
  case IF_EXP:{
    Exp* pred = read_exp();
  402126:	b8 00 00 00 00       	mov    $0x0,%eax
  40212b:	e8 3b fd ff ff       	callq  401e6b <read_exp>
  402130:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    ScopeStmt* conseq = read_scopestmt();
  402134:	b8 00 00 00 00       	mov    $0x0,%eax
  402139:	e8 63 01 00 00       	callq  4022a1 <read_scopestmt>
  40213e:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    ScopeStmt* alt = read_scopestmt();
  402142:	b8 00 00 00 00       	mov    $0x0,%eax
  402147:	e8 55 01 00 00       	callq  4022a1 <read_scopestmt>
  40214c:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    return make_IfExp(pred, conseq, alt);
  402150:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402154:	48 8b 4d d8          	mov    -0x28(%rbp),%rcx
  402158:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40215c:	48 89 ce             	mov    %rcx,%rsi
  40215f:	48 89 c7             	mov    %rax,%rdi
  402162:	e8 15 f1 ff ff       	callq  40127c <make_IfExp>
  402167:	eb 6e                	jmp    4021d7 <read_exp+0x36c>
  }
  case WHILE_EXP:{
    Exp* pred = read_exp();
  402169:	b8 00 00 00 00       	mov    $0x0,%eax
  40216e:	e8 f8 fc ff ff       	callq  401e6b <read_exp>
  402173:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ScopeStmt* body = read_scopestmt();
  402177:	b8 00 00 00 00       	mov    $0x0,%eax
  40217c:	e8 20 01 00 00       	callq  4022a1 <read_scopestmt>
  402181:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    return make_WhileExp(pred, body);
  402185:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402189:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40218d:	48 89 d6             	mov    %rdx,%rsi
  402190:	48 89 c7             	mov    %rax,%rdi
  402193:	e8 3a f1 ff ff       	callq  4012d2 <make_WhileExp>
  402198:	eb 3d                	jmp    4021d7 <read_exp+0x36c>
  }
  case REF_EXP:{
    char* name = read_string();
  40219a:	b8 00 00 00 00       	mov    $0x0,%eax
  40219f:	e8 2a fb ff ff       	callq  401cce <read_string>
  4021a4:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return make_RefExp(name);
  4021a8:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4021ac:	48 89 c7             	mov    %rax,%rdi
  4021af:	e8 64 f1 ff ff       	callq  401318 <make_RefExp>
  4021b4:	eb 21                	jmp    4021d7 <read_exp+0x36c>
  }
  default:{
    printf("Expression with unrecognized tag: %d\n", tag);
  4021b6:	8b 85 28 ff ff ff    	mov    -0xd8(%rbp),%eax
  4021bc:	89 c6                	mov    %eax,%esi
  4021be:	bf 28 3f 40 00       	mov    $0x403f28,%edi
  4021c3:	b8 00 00 00 00       	mov    $0x0,%eax
  4021c8:	e8 23 e7 ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  4021cd:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4021d2:	e8 c9 e7 ff ff       	callq  4009a0 <exit@plt>
  }
  }
}
  4021d7:	c9                   	leaveq 
  4021d8:	c3                   	retq   

00000000004021d9 <read_slot>:

SlotStmt* read_slot () {
  4021d9:	55                   	push   %rbp
  4021da:	48 89 e5             	mov    %rsp,%rbp
  4021dd:	48 83 ec 30          	sub    $0x30,%rsp
  AstTag tag = read_int();
  4021e1:	b8 00 00 00 00       	mov    $0x0,%eax
  4021e6:	e8 86 fa ff ff       	callq  401c71 <read_int>
  4021eb:	89 45 d0             	mov    %eax,-0x30(%rbp)
  switch(tag){
  4021ee:	8b 45 d0             	mov    -0x30(%rbp),%eax
  4021f1:	83 f8 0d             	cmp    $0xd,%eax
  4021f4:	74 0a                	je     402200 <read_slot+0x27>
  4021f6:	83 f8 0e             	cmp    $0xe,%eax
  4021f9:	74 36                	je     402231 <read_slot+0x58>
  4021fb:	e9 81 00 00 00       	jmpq   402281 <read_slot+0xa8>
  case VAR_STMT:{
    char* name = read_string();
  402200:	b8 00 00 00 00       	mov    $0x0,%eax
  402205:	e8 c4 fa ff ff       	callq  401cce <read_string>
  40220a:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    Exp* exp = read_exp();
  40220e:	b8 00 00 00 00       	mov    $0x0,%eax
  402213:	e8 53 fc ff ff       	callq  401e6b <read_exp>
  402218:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    return make_SlotVar(name, exp);
  40221c:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402220:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  402224:	48 89 d6             	mov    %rdx,%rsi
  402227:	48 89 c7             	mov    %rax,%rdi
  40222a:	e8 1f f1 ff ff       	callq  40134e <make_SlotVar>
  40222f:	eb 6e                	jmp    40229f <read_slot+0xc6>
  }
  case FN_STMT:{
    char* name = read_string();
  402231:	b8 00 00 00 00       	mov    $0x0,%eax
  402236:	e8 93 fa ff ff       	callq  401cce <read_string>
  40223b:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    int nargs = read_int();
  40223f:	b8 00 00 00 00       	mov    $0x0,%eax
  402244:	e8 28 fa ff ff       	callq  401c71 <read_int>
  402249:	89 45 d4             	mov    %eax,-0x2c(%rbp)
    char** args = read_strings(nargs);
  40224c:	8b 45 d4             	mov    -0x2c(%rbp),%eax
  40224f:	89 c7                	mov    %eax,%edi
  402251:	e8 ec fa ff ff       	callq  401d42 <read_strings>
  402256:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    ScopeStmt* body = read_scopestmt();
  40225a:	b8 00 00 00 00       	mov    $0x0,%eax
  40225f:	e8 3d 00 00 00       	callq  4022a1 <read_scopestmt>
  402264:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return make_SlotMethod(name, nargs, args, body);
  402268:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  40226c:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402270:	8b 75 d4             	mov    -0x2c(%rbp),%esi
  402273:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402277:	48 89 c7             	mov    %rax,%rdi
  40227a:	e8 15 f1 ff ff       	callq  401394 <make_SlotMethod>
  40227f:	eb 1e                	jmp    40229f <read_slot+0xc6>
  }
  default:{
    printf("Unrecognized slot with tag: %d\n", tag);
  402281:	8b 45 d0             	mov    -0x30(%rbp),%eax
  402284:	89 c6                	mov    %eax,%esi
  402286:	bf b8 3f 40 00       	mov    $0x403fb8,%edi
  40228b:	b8 00 00 00 00       	mov    $0x0,%eax
  402290:	e8 5b e6 ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  402295:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40229a:	e8 01 e7 ff ff       	callq  4009a0 <exit@plt>
  }
  }
}
  40229f:	c9                   	leaveq 
  4022a0:	c3                   	retq   

00000000004022a1 <read_scopestmt>:

ScopeStmt* read_scopestmt () {
  4022a1:	55                   	push   %rbp
  4022a2:	48 89 e5             	mov    %rsp,%rbp
  4022a5:	48 83 ec 50          	sub    $0x50,%rsp
  AstTag tag = read_int();
  4022a9:	b8 00 00 00 00       	mov    $0x0,%eax
  4022ae:	e8 be f9 ff ff       	callq  401c71 <read_int>
  4022b3:	89 45 b8             	mov    %eax,-0x48(%rbp)
  switch(tag){
  4022b6:	8b 45 b8             	mov    -0x48(%rbp),%eax
  4022b9:	83 f8 0e             	cmp    $0xe,%eax
  4022bc:	74 5a                	je     402318 <read_scopestmt+0x77>
  4022be:	83 f8 0e             	cmp    $0xe,%eax
  4022c1:	77 0a                	ja     4022cd <read_scopestmt+0x2c>
  4022c3:	83 f8 0d             	cmp    $0xd,%eax
  4022c6:	74 1c                	je     4022e4 <read_scopestmt+0x43>
  4022c8:	e9 e8 00 00 00       	jmpq   4023b5 <read_scopestmt+0x114>
  4022cd:	83 f8 0f             	cmp    $0xf,%eax
  4022d0:	0f 84 92 00 00 00    	je     402368 <read_scopestmt+0xc7>
  4022d6:	83 f8 10             	cmp    $0x10,%eax
  4022d9:	0f 84 ba 00 00 00    	je     402399 <read_scopestmt+0xf8>
  4022df:	e9 d1 00 00 00       	jmpq   4023b5 <read_scopestmt+0x114>
  case VAR_STMT:{
    char* name = read_string();
  4022e4:	b8 00 00 00 00       	mov    $0x0,%eax
  4022e9:	e8 e0 f9 ff ff       	callq  401cce <read_string>
  4022ee:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    Exp* exp = read_exp();
  4022f2:	b8 00 00 00 00       	mov    $0x0,%eax
  4022f7:	e8 6f fb ff ff       	callq  401e6b <read_exp>
  4022fc:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    return make_ScopeVar(name, exp);
  402300:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  402304:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  402308:	48 89 d6             	mov    %rdx,%rsi
  40230b:	48 89 c7             	mov    %rax,%rdi
  40230e:	e8 e4 f0 ff ff       	callq  4013f7 <make_ScopeVar>
  402313:	e9 bb 00 00 00       	jmpq   4023d3 <read_scopestmt+0x132>
  }
  case FN_STMT:{
    char* name = read_string();
  402318:	b8 00 00 00 00       	mov    $0x0,%eax
  40231d:	e8 ac f9 ff ff       	callq  401cce <read_string>
  402322:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    int nargs = read_int();
  402326:	b8 00 00 00 00       	mov    $0x0,%eax
  40232b:	e8 41 f9 ff ff       	callq  401c71 <read_int>
  402330:	89 45 bc             	mov    %eax,-0x44(%rbp)
    char** args = read_strings(nargs);
  402333:	8b 45 bc             	mov    -0x44(%rbp),%eax
  402336:	89 c7                	mov    %eax,%edi
  402338:	e8 05 fa ff ff       	callq  401d42 <read_strings>
  40233d:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    ScopeStmt* body = read_scopestmt();
  402341:	b8 00 00 00 00       	mov    $0x0,%eax
  402346:	e8 56 ff ff ff       	callq  4022a1 <read_scopestmt>
  40234b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    return make_ScopeFn(name, nargs, args, body);
  40234f:	48 8b 4d e0          	mov    -0x20(%rbp),%rcx
  402353:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  402357:	8b 75 bc             	mov    -0x44(%rbp),%esi
  40235a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  40235e:	48 89 c7             	mov    %rax,%rdi
  402361:	e8 d7 f0 ff ff       	callq  40143d <make_ScopeFn>
  402366:	eb 6b                	jmp    4023d3 <read_scopestmt+0x132>
  }
  case SEQ_STMT:{
    ScopeStmt* a = read_scopestmt();
  402368:	b8 00 00 00 00       	mov    $0x0,%eax
  40236d:	e8 2f ff ff ff       	callq  4022a1 <read_scopestmt>
  402372:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    ScopeStmt* b = read_scopestmt();
  402376:	b8 00 00 00 00       	mov    $0x0,%eax
  40237b:	e8 21 ff ff ff       	callq  4022a1 <read_scopestmt>
  402380:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    return make_ScopeSeq(a, b);
  402384:	48 8b 55 f0          	mov    -0x10(%rbp),%rdx
  402388:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40238c:	48 89 d6             	mov    %rdx,%rsi
  40238f:	48 89 c7             	mov    %rax,%rdi
  402392:	e8 09 f1 ff ff       	callq  4014a0 <make_ScopeSeq>
  402397:	eb 3a                	jmp    4023d3 <read_scopestmt+0x132>
  }    
  case EXP_STMT:{
    Exp* e = read_exp();
  402399:	b8 00 00 00 00       	mov    $0x0,%eax
  40239e:	e8 c8 fa ff ff       	callq  401e6b <read_exp>
  4023a3:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    return make_ScopeExp(e);
  4023a7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4023ab:	48 89 c7             	mov    %rax,%rdi
  4023ae:	e8 33 f1 ff ff       	callq  4014e6 <make_ScopeExp>
  4023b3:	eb 1e                	jmp    4023d3 <read_scopestmt+0x132>
  }
  default:{
    printf("Scope statement with unrecognized tag: %d\n", tag);
  4023b5:	8b 45 b8             	mov    -0x48(%rbp),%eax
  4023b8:	89 c6                	mov    %eax,%esi
  4023ba:	bf d8 3f 40 00       	mov    $0x403fd8,%edi
  4023bf:	b8 00 00 00 00       	mov    $0x0,%eax
  4023c4:	e8 27 e5 ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  4023c9:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4023ce:	e8 cd e5 ff ff       	callq  4009a0 <exit@plt>
  }    
  }
  return 0;
}
  4023d3:	c9                   	leaveq 
  4023d4:	c3                   	retq   

00000000004023d5 <read_ast>:

ScopeStmt* read_ast (char* filename) {
  4023d5:	55                   	push   %rbp
  4023d6:	48 89 e5             	mov    %rsp,%rbp
  4023d9:	48 83 ec 20          	sub    $0x20,%rsp
  4023dd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  inputfile = fopen(filename, "r");
  4023e1:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4023e5:	be 03 40 40 00       	mov    $0x404003,%esi
  4023ea:	48 89 c7             	mov    %rax,%rdi
  4023ed:	e8 9e e5 ff ff       	callq  400990 <fopen@plt>
  4023f2:	48 89 05 f7 3c 20 00 	mov    %rax,0x203cf7(%rip)        # 6060f0 <inputfile>
  if(!inputfile){
  4023f9:	48 8b 05 f0 3c 20 00 	mov    0x203cf0(%rip),%rax        # 6060f0 <inputfile>
  402400:	48 85 c0             	test   %rax,%rax
  402403:	75 20                	jne    402425 <read_ast+0x50>
    printf("Could not open file %s\n", filename);
  402405:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402409:	48 89 c6             	mov    %rax,%rsi
  40240c:	bf 05 40 40 00       	mov    $0x404005,%edi
  402411:	b8 00 00 00 00       	mov    $0x0,%eax
  402416:	e8 d5 e4 ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  40241b:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  402420:	e8 7b e5 ff ff       	callq  4009a0 <exit@plt>
  }
  ScopeStmt* s = read_scopestmt();  
  402425:	b8 00 00 00 00       	mov    $0x0,%eax
  40242a:	e8 72 fe ff ff       	callq  4022a1 <read_scopestmt>
  40242f:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  fclose(inputfile);
  402433:	48 8b 05 b6 3c 20 00 	mov    0x203cb6(%rip),%rax        # 6060f0 <inputfile>
  40243a:	48 89 c7             	mov    %rax,%rdi
  40243d:	e8 6e e4 ff ff       	callq  4008b0 <fclose@plt>
  return s;
  402442:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  402446:	c9                   	leaveq 
  402447:	c3                   	retq   

0000000000402448 <obj_type>:
#include "interpreter.h"

#define get_entry_obj(env, name) get_entry(env, name)->object


int obj_type (Obj* o) {
  402448:	55                   	push   %rbp
  402449:	48 89 e5             	mov    %rsp,%rbp
  40244c:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return o->obj_type;
  402450:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402454:	8b 00                	mov    (%rax),%eax
}
  402456:	5d                   	pop    %rbp
  402457:	c3                   	retq   

0000000000402458 <make_null_obj>:

NullObj* make_null_obj (){
  402458:	55                   	push   %rbp
  402459:	48 89 e5             	mov    %rsp,%rbp
  40245c:	48 83 ec 10          	sub    $0x10,%rsp
	NullObj* null;
	null = (NullObj* ) malloc (sizeof(NullObj)); 
  402460:	bf 04 00 00 00       	mov    $0x4,%edi
  402465:	e8 16 e5 ff ff       	callq  400980 <malloc@plt>
  40246a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	null->obj_type = NULL_TYPE;
  40246e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402472:	c7 00 00 00 00 00    	movl   $0x0,(%rax)
	return null;
  402478:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40247c:	c9                   	leaveq 
  40247d:	c3                   	retq   

000000000040247e <make_int_obj>:

IntObj* make_int_obj (int value){
  40247e:	55                   	push   %rbp
  40247f:	48 89 e5             	mov    %rsp,%rbp
  402482:	48 83 ec 20          	sub    $0x20,%rsp
  402486:	89 7d ec             	mov    %edi,-0x14(%rbp)
	IntObj* obj;
	obj = (IntObj*) malloc (sizeof(IntObj));
  402489:	bf 08 00 00 00       	mov    $0x8,%edi
  40248e:	e8 ed e4 ff ff       	callq  400980 <malloc@plt>
  402493:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	obj->obj_type = INT_TYPE;
  402497:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40249b:	c7 00 01 00 00 00    	movl   $0x1,(%rax)
	obj->value = value;
  4024a1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4024a5:	8b 55 ec             	mov    -0x14(%rbp),%edx
  4024a8:	89 50 04             	mov    %edx,0x4(%rax)
	return obj;	
  4024ab:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4024af:	c9                   	leaveq 
  4024b0:	c3                   	retq   

00000000004024b1 <add>:

IntObj* add (IntObj* x, IntObj* y){
  4024b1:	55                   	push   %rbp
  4024b2:	48 89 e5             	mov    %rsp,%rbp
  4024b5:	48 83 ec 20          	sub    $0x20,%rsp
  4024b9:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4024bd:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	IntObj* res;
	res = (IntObj*) malloc (sizeof(IntObj));
  4024c1:	bf 08 00 00 00       	mov    $0x8,%edi
  4024c6:	e8 b5 e4 ff ff       	callq  400980 <malloc@plt>
  4024cb:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	res->value = x->value + y->value;
  4024cf:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4024d3:	8b 50 04             	mov    0x4(%rax),%edx
  4024d6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4024da:	8b 40 04             	mov    0x4(%rax),%eax
  4024dd:	01 c2                	add    %eax,%edx
  4024df:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4024e3:	89 50 04             	mov    %edx,0x4(%rax)
	return res;	
  4024e6:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4024ea:	c9                   	leaveq 
  4024eb:	c3                   	retq   

00000000004024ec <sub>:
IntObj* sub (IntObj* x, IntObj* y){
  4024ec:	55                   	push   %rbp
  4024ed:	48 89 e5             	mov    %rsp,%rbp
  4024f0:	48 83 ec 20          	sub    $0x20,%rsp
  4024f4:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4024f8:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	IntObj* res;
	res = (IntObj*) malloc (sizeof(IntObj));
  4024fc:	bf 08 00 00 00       	mov    $0x8,%edi
  402501:	e8 7a e4 ff ff       	callq  400980 <malloc@plt>
  402506:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	res->value = x->value - y->value;
  40250a:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  40250e:	8b 50 04             	mov    0x4(%rax),%edx
  402511:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402515:	8b 40 04             	mov    0x4(%rax),%eax
  402518:	29 c2                	sub    %eax,%edx
  40251a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40251e:	89 50 04             	mov    %edx,0x4(%rax)
	return res;	
  402521:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  402525:	c9                   	leaveq 
  402526:	c3                   	retq   

0000000000402527 <lt>:

Obj* lt (IntObj* x, IntObj* y){
  402527:	55                   	push   %rbp
  402528:	48 89 e5             	mov    %rsp,%rbp
  40252b:	48 83 ec 20          	sub    $0x20,%rsp
  40252f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402533:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   Obj* res;
   res = (Obj*) malloc (sizeof(Obj));
  402537:	bf 18 00 00 00       	mov    $0x18,%edi
  40253c:	e8 3f e4 ff ff       	callq  400980 <malloc@plt>
  402541:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   if ( x->value < y->value ){
  402545:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402549:	8b 50 04             	mov    0x4(%rax),%edx
  40254c:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  402550:	8b 40 04             	mov    0x4(%rax),%eax
  402553:	39 c2                	cmp    %eax,%edx
  402555:	7d 22                	jge    402579 <lt+0x52>
	   res->tag = INT_TYPE;
  402557:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40255b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
	   res->value.num = make_int_obj(0);
  402562:	bf 00 00 00 00       	mov    $0x0,%edi
  402567:	e8 12 ff ff ff       	callq  40247e <make_int_obj>
  40256c:	48 89 c2             	mov    %rax,%rdx
  40256f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402573:	48 89 50 10          	mov    %rdx,0x10(%rax)
  402577:	eb 20                	jmp    402599 <lt+0x72>
   }
	else{
	   res->tag = NULL_TYPE;
  402579:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40257d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
	   res->value.null = make_null_obj();
  402584:	b8 00 00 00 00       	mov    $0x0,%eax
  402589:	e8 ca fe ff ff       	callq  402458 <make_null_obj>
  40258e:	48 89 c2             	mov    %rax,%rdx
  402591:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402595:	48 89 50 10          	mov    %rdx,0x10(%rax)
   }
	return res;	
  402599:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40259d:	c9                   	leaveq 
  40259e:	c3                   	retq   

000000000040259f <le>:
Obj* le (IntObj* x, IntObj* y){
  40259f:	55                   	push   %rbp
  4025a0:	48 89 e5             	mov    %rsp,%rbp
  4025a3:	48 83 ec 20          	sub    $0x20,%rsp
  4025a7:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4025ab:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   Obj* res;
   res = (Obj*) malloc (sizeof(Obj));
  4025af:	bf 18 00 00 00       	mov    $0x18,%edi
  4025b4:	e8 c7 e3 ff ff       	callq  400980 <malloc@plt>
  4025b9:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   if ( x->value <= y->value ){
  4025bd:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4025c1:	8b 50 04             	mov    0x4(%rax),%edx
  4025c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4025c8:	8b 40 04             	mov    0x4(%rax),%eax
  4025cb:	39 c2                	cmp    %eax,%edx
  4025cd:	7f 22                	jg     4025f1 <le+0x52>
	   res->tag = INT_TYPE;
  4025cf:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4025d3:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
	   res->value.num = (IntObj*)make_int_obj(0);
  4025da:	bf 00 00 00 00       	mov    $0x0,%edi
  4025df:	e8 9a fe ff ff       	callq  40247e <make_int_obj>
  4025e4:	48 89 c2             	mov    %rax,%rdx
  4025e7:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4025eb:	48 89 50 10          	mov    %rdx,0x10(%rax)
  4025ef:	eb 20                	jmp    402611 <le+0x72>
   }
	else{
	   res->tag = NULL_TYPE;
  4025f1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4025f5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
	   res->value.null = (NullObj*)make_null_obj();
  4025fc:	b8 00 00 00 00       	mov    $0x0,%eax
  402601:	e8 52 fe ff ff       	callq  402458 <make_null_obj>
  402606:	48 89 c2             	mov    %rax,%rdx
  402609:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40260d:	48 89 50 10          	mov    %rdx,0x10(%rax)
   }
	return res;	
  402611:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  402615:	c9                   	leaveq 
  402616:	c3                   	retq   

0000000000402617 <make_var_object>:

Obj* make_var_object(char* name, Type tag, void* value){
  402617:	55                   	push   %rbp
  402618:	48 89 e5             	mov    %rsp,%rbp
  40261b:	48 83 ec 30          	sub    $0x30,%rsp
  40261f:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402623:	89 75 e4             	mov    %esi,-0x1c(%rbp)
  402626:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   Obj* res;
   res = (Obj*) malloc (sizeof(Obj));
  40262a:	bf 18 00 00 00       	mov    $0x18,%edi
  40262f:	e8 4c e3 ff ff       	callq  400980 <malloc@plt>
  402634:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   res->tag = tag;
  402638:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40263c:	8b 55 e4             	mov    -0x1c(%rbp),%edx
  40263f:	89 50 04             	mov    %edx,0x4(%rax)
   res->name = name;
  402642:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402646:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  40264a:	48 89 50 08          	mov    %rdx,0x8(%rax)
   switch(tag){
  40264e:	83 7d e4 07          	cmpl   $0x7,-0x1c(%rbp)
  402652:	77 53                	ja     4026a7 <make_var_object+0x90>
  402654:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  402657:	48 8b 04 c5 48 40 40 	mov    0x404048(,%rax,8),%rax
  40265e:	00 
  40265f:	ff e0                	jmpq   *%rax
	   case INT_TYPE:
	     res->value.num = (IntObj*)value;
  402661:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402665:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  402669:	48 89 50 10          	mov    %rdx,0x10(%rax)
	     break;
  40266d:	eb 56                	jmp    4026c5 <make_var_object+0xae>
	   case NULL_TYPE:
	     res->value.null = (NullObj*)value;
  40266f:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402673:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  402677:	48 89 50 10          	mov    %rdx,0x10(%rax)
	     break;
  40267b:	eb 48                	jmp    4026c5 <make_var_object+0xae>
	   case CODE:
	     res->value.code = (CodeEntry*)value;
  40267d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402681:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  402685:	48 89 50 10          	mov    %rdx,0x10(%rax)
	     break;
  402689:	eb 3a                	jmp    4026c5 <make_var_object+0xae>
	   case DATA:
		 res->value.data = (DataEntry*)value;
  40268b:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40268f:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  402693:	48 89 50 10          	mov    %rdx,0x10(%rax)
		 break;
  402697:	eb 2c                	jmp    4026c5 <make_var_object+0xae>
	   case ENV_OBJ:
		 res->value.env = (EnvObj*)value;
  402699:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40269d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4026a1:	48 89 50 10          	mov    %rdx,0x10(%rax)
		 break;
  4026a5:	eb 1e                	jmp    4026c5 <make_var_object+0xae>
	   default:
          printf("Unrecognized object with tag %d\n", tag);
  4026a7:	8b 45 e4             	mov    -0x1c(%rbp),%eax
  4026aa:	89 c6                	mov    %eax,%esi
  4026ac:	bf 20 40 40 00       	mov    $0x404020,%edi
  4026b1:	b8 00 00 00 00       	mov    $0x0,%eax
  4026b6:	e8 35 e2 ff ff       	callq  4008f0 <printf@plt>
          exit(-1);
  4026bb:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4026c0:	e8 db e2 ff ff       	callq  4009a0 <exit@plt>
   }
   
   return res;
  4026c5:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  4026c9:	c9                   	leaveq 
  4026ca:	c3                   	retq   

00000000004026cb <gt>:

Obj* gt (IntObj* x, IntObj* y){
  4026cb:	55                   	push   %rbp
  4026cc:	48 89 e5             	mov    %rsp,%rbp
  4026cf:	48 83 ec 20          	sub    $0x20,%rsp
  4026d3:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4026d7:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
   Obj* res;
   res = (Obj*) malloc (sizeof(Obj));
  4026db:	bf 18 00 00 00       	mov    $0x18,%edi
  4026e0:	e8 9b e2 ff ff       	callq  400980 <malloc@plt>
  4026e5:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   if ( x->value > y->value ){
  4026e9:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4026ed:	8b 50 04             	mov    0x4(%rax),%edx
  4026f0:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4026f4:	8b 40 04             	mov    0x4(%rax),%eax
  4026f7:	39 c2                	cmp    %eax,%edx
  4026f9:	7e 22                	jle    40271d <gt+0x52>
	   res->tag = INT_TYPE;
  4026fb:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4026ff:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
	   res->value.num = make_int_obj(0);
  402706:	bf 00 00 00 00       	mov    $0x0,%edi
  40270b:	e8 6e fd ff ff       	callq  40247e <make_int_obj>
  402710:	48 89 c2             	mov    %rax,%rdx
  402713:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402717:	48 89 50 10          	mov    %rdx,0x10(%rax)
  40271b:	eb 20                	jmp    40273d <gt+0x72>
   }
	else{
	   res->tag = NULL_TYPE;
  40271d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402721:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
	   res->value.null = make_null_obj();
  402728:	b8 00 00 00 00       	mov    $0x0,%eax
  40272d:	e8 26 fd ff ff       	callq  402458 <make_null_obj>
  402732:	48 89 c2             	mov    %rax,%rdx
  402735:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402739:	48 89 50 10          	mov    %rdx,0x10(%rax)
   }
	return res;		
  40273d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  402741:	c9                   	leaveq 
  402742:	c3                   	retq   

0000000000402743 <make_array_obj>:

ArrayObj* make_array_obj (int length){
  402743:	55                   	push   %rbp
  402744:	48 89 e5             	mov    %rsp,%rbp
  402747:	48 83 ec 20          	sub    $0x20,%rsp
  40274b:	89 7d ec             	mov    %edi,-0x14(%rbp)
	ArrayObj* arr ;
	arr = (ArrayObj*) malloc(sizeof(ArrayObj));
  40274e:	bf 10 00 00 00       	mov    $0x10,%edi
  402753:	e8 28 e2 ff ff       	callq  400980 <malloc@plt>
  402758:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	arr->obj_type = ARRAY_TYPE;
  40275c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402760:	c7 00 03 00 00 00    	movl   $0x3,(%rax)
	arr->length = length;
  402766:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40276a:	8b 55 ec             	mov    -0x14(%rbp),%edx
  40276d:	89 50 04             	mov    %edx,0x4(%rax)
	arr->elems = (Obj**) malloc(length * sizeof(Obj*));	
  402770:	8b 45 ec             	mov    -0x14(%rbp),%eax
  402773:	48 98                	cltq   
  402775:	48 c1 e0 03          	shl    $0x3,%rax
  402779:	48 89 c7             	mov    %rax,%rdi
  40277c:	e8 ff e1 ff ff       	callq  400980 <malloc@plt>
  402781:	48 89 c2             	mov    %rax,%rdx
  402784:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402788:	48 89 50 08          	mov    %rdx,0x8(%rax)
	return arr;
  40278c:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  402790:	c9                   	leaveq 
  402791:	c3                   	retq   

0000000000402792 <array_length>:

IntObj* array_length (ArrayObj* a){
  402792:	55                   	push   %rbp
  402793:	48 89 e5             	mov    %rsp,%rbp
  402796:	48 83 ec 10          	sub    $0x10,%rsp
  40279a:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
	return make_int_obj(a->length);
  40279e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4027a2:	8b 40 04             	mov    0x4(%rax),%eax
  4027a5:	89 c7                	mov    %eax,%edi
  4027a7:	e8 d2 fc ff ff       	callq  40247e <make_int_obj>
}
  4027ac:	c9                   	leaveq 
  4027ad:	c3                   	retq   

00000000004027ae <array_set>:

NullObj* array_set (ArrayObj* a, IntObj* i, Obj* v){
  4027ae:	55                   	push   %rbp
  4027af:	48 89 e5             	mov    %rsp,%rbp
  4027b2:	48 83 ec 20          	sub    $0x20,%rsp
  4027b6:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4027ba:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
  4027be:	48 89 55 e8          	mov    %rdx,-0x18(%rbp)
	a->elems[i->value] = v;
  4027c2:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4027c6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4027ca:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4027ce:	8b 40 04             	mov    0x4(%rax),%eax
  4027d1:	48 98                	cltq   
  4027d3:	48 c1 e0 03          	shl    $0x3,%rax
  4027d7:	48 01 c2             	add    %rax,%rdx
  4027da:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4027de:	48 89 02             	mov    %rax,(%rdx)
	return make_null_obj();
  4027e1:	b8 00 00 00 00       	mov    $0x0,%eax
  4027e6:	e8 6d fc ff ff       	callq  402458 <make_null_obj>
}
  4027eb:	c9                   	leaveq 
  4027ec:	c3                   	retq   

00000000004027ed <array_get>:


Obj* array_get (ArrayObj* a, IntObj* i){
  4027ed:	55                   	push   %rbp
  4027ee:	48 89 e5             	mov    %rsp,%rbp
  4027f1:	48 89 7d f8          	mov    %rdi,-0x8(%rbp)
  4027f5:	48 89 75 f0          	mov    %rsi,-0x10(%rbp)
	return a->elems[i->value];
  4027f9:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  4027fd:	48 8b 50 08          	mov    0x8(%rax),%rdx
  402801:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402805:	8b 40 04             	mov    0x4(%rax),%eax
  402808:	48 98                	cltq   
  40280a:	48 c1 e0 03          	shl    $0x3,%rax
  40280e:	48 01 d0             	add    %rdx,%rax
  402811:	48 8b 00             	mov    (%rax),%rax
}
  402814:	5d                   	pop    %rbp
  402815:	c3                   	retq   

0000000000402816 <make_env_obj>:

/*Environment Objects */
EnvObj* make_env_obj (Obj* parent){
  402816:	55                   	push   %rbp
  402817:	48 89 e5             	mov    %rsp,%rbp
  40281a:	48 83 ec 20          	sub    $0x20,%rsp
  40281e:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
	EnvObj* env = (EnvObj*) malloc(sizeof(EnvObj));
  402822:	bf 20 00 00 00       	mov    $0x20,%edi
  402827:	e8 54 e1 ff ff       	callq  400980 <malloc@plt>
  40282c:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	env->obj_type = ENV_OBJ;
  402830:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402834:	c7 00 04 00 00 00    	movl   $0x4,(%rax)
	env->parent = parent;
  40283a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40283e:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  402842:	48 89 50 08          	mov    %rdx,0x8(%rax)
	return env;
  402846:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40284a:	c9                   	leaveq 
  40284b:	c3                   	retq   

000000000040284c <add_entry>:

void add_entry (EnvObj* env, char* name,  Entry* entry){
  40284c:	55                   	push   %rbp
  40284d:	48 89 e5             	mov    %rsp,%rbp
  402850:	48 83 ec 30          	sub    $0x30,%rsp
  402854:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  402858:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
  40285c:	48 89 55 d8          	mov    %rdx,-0x28(%rbp)
   EntryDescriptor* desc = (EntryDescriptor*) malloc(sizeof(EntryDescriptor));
  402860:	bf 18 00 00 00       	mov    $0x18,%edi
  402865:	e8 16 e1 ff ff       	callq  400980 <malloc@plt>
  40286a:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
   desc->key = name;
  40286e:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402872:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402876:	48 89 10             	mov    %rdx,(%rax)
   desc->val = entry;
  402879:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40287d:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  402881:	48 89 50 08          	mov    %rdx,0x8(%rax)
   if(env->head == NULL){
  402885:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402889:	48 8b 40 10          	mov    0x10(%rax),%rax
  40288d:	48 85 c0             	test   %rax,%rax
  402890:	75 0e                	jne    4028a0 <add_entry+0x54>
	   env->head = desc;
  402892:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  402896:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  40289a:	48 89 50 10          	mov    %rdx,0x10(%rax)
  40289e:	eb 33                	jmp    4028d3 <add_entry+0x87>
   }else{
	 EntryDescriptor* node = env->head;  /*start at the first node*/
  4028a0:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4028a4:	48 8b 40 10          	mov    0x10(%rax),%rax
  4028a8:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	 while(node->next != NULL){/*go to the end*/
  4028ac:	eb 0c                	jmp    4028ba <add_entry+0x6e>
	   node = node->next;
  4028ae:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4028b2:	48 8b 40 10          	mov    0x10(%rax),%rax
  4028b6:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
   desc->val = entry;
   if(env->head == NULL){
	   env->head = desc;
   }else{
	 EntryDescriptor* node = env->head;  /*start at the first node*/
	 while(node->next != NULL){/*go to the end*/
  4028ba:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4028be:	48 8b 40 10          	mov    0x10(%rax),%rax
  4028c2:	48 85 c0             	test   %rax,%rax
  4028c5:	75 e7                	jne    4028ae <add_entry+0x62>
	   node = node->next;
     }
     node->next = desc; 
  4028c7:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4028cb:	48 8b 55 f8          	mov    -0x8(%rbp),%rdx
  4028cf:	48 89 50 10          	mov    %rdx,0x10(%rax)
   }
   
	
}
  4028d3:	c9                   	leaveq 
  4028d4:	c3                   	retq   

00000000004028d5 <get_entry>:


Entry* get_entry (EnvObj* env, char* name){
  4028d5:	55                   	push   %rbp
  4028d6:	48 89 e5             	mov    %rsp,%rbp
  4028d9:	48 83 ec 20          	sub    $0x20,%rsp
  4028dd:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  4028e1:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	
	EntryDescriptor* desc = env->head;
  4028e5:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  4028e9:	48 8b 40 10          	mov    0x10(%rax),%rax
  4028ed:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
	Entry* entry = NULL;
  4028f1:	48 c7 45 f8 00 00 00 	movq   $0x0,-0x8(%rbp)
  4028f8:	00 
	while(desc != NULL){
  4028f9:	eb 38                	jmp    402933 <get_entry+0x5e>
		if(strcmp(desc->key, name)== 0){
  4028fb:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  4028ff:	48 8b 00             	mov    (%rax),%rax
  402902:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  402906:	48 89 d6             	mov    %rdx,%rsi
  402909:	48 89 c7             	mov    %rax,%rdi
  40290c:	e8 1f e0 ff ff       	callq  400930 <strcmp@plt>
  402911:	85 c0                	test   %eax,%eax
  402913:	75 12                	jne    402927 <get_entry+0x52>
		    entry = desc->val;
  402915:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  402919:	48 8b 40 08          	mov    0x8(%rax),%rax
  40291d:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
		    return entry;
  402921:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402925:	eb 17                	jmp    40293e <get_entry+0x69>
		}
		desc = desc->next;
  402927:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  40292b:	48 8b 40 10          	mov    0x10(%rax),%rax
  40292f:	48 89 45 f0          	mov    %rax,-0x10(%rbp)

Entry* get_entry (EnvObj* env, char* name){
	
	EntryDescriptor* desc = env->head;
	Entry* entry = NULL;
	while(desc != NULL){
  402933:	48 83 7d f0 00       	cmpq   $0x0,-0x10(%rbp)
  402938:	75 c1                	jne    4028fb <get_entry+0x26>
		    entry = desc->val;
		    return entry;
		}
		desc = desc->next;
	}
	return entry;
  40293a:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  40293e:	c9                   	leaveq 
  40293f:	c3                   	retq   

0000000000402940 <make_entry>:
  SET_EXP,
  IF_EXP,
  WHILE_EXP,
  REF_EXP,*/

Entry* make_entry(Type type, Obj* obj){
  402940:	55                   	push   %rbp
  402941:	48 89 e5             	mov    %rsp,%rbp
  402944:	48 83 ec 20          	sub    $0x20,%rsp
  402948:	89 7d ec             	mov    %edi,-0x14(%rbp)
  40294b:	48 89 75 e0          	mov    %rsi,-0x20(%rbp)
	Entry* entry = (Entry*)malloc(sizeof(Entry));
  40294f:	bf 10 00 00 00       	mov    $0x10,%edi
  402954:	e8 27 e0 ff ff       	callq  400980 <malloc@plt>
  402959:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
	entry->obj_type = type;
  40295d:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  402961:	8b 55 ec             	mov    -0x14(%rbp),%edx
  402964:	89 10                	mov    %edx,(%rax)
	entry->object = obj;
  402966:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  40296a:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  40296e:	48 89 50 08          	mov    %rdx,0x8(%rax)
	return entry;
  402972:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
}
  402976:	c9                   	leaveq 
  402977:	c3                   	retq   

0000000000402978 <eval_exp>:
  
Obj* eval_exp (EnvObj* genv, EnvObj* env, Exp* e){
  402978:	55                   	push   %rbp
  402979:	48 89 e5             	mov    %rsp,%rbp
  40297c:	41 57                	push   %r15
  40297e:	41 56                	push   %r14
  402980:	41 55                	push   %r13
  402982:	41 54                	push   %r12
  402984:	53                   	push   %rbx
  402985:	48 81 ec c8 01 00 00 	sub    $0x1c8,%rsp
  40298c:	48 89 bd 28 fe ff ff 	mov    %rdi,-0x1d8(%rbp)
  402993:	48 89 b5 20 fe ff ff 	mov    %rsi,-0x1e0(%rbp)
  40299a:	48 89 95 18 fe ff ff 	mov    %rdx,-0x1e8(%rbp)
  4029a1:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax
  4029a8:	00 00 
  4029aa:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
  4029ae:	31 c0                	xor    %eax,%eax
  
  Obj* res =  (Obj*) malloc(sizeof(Obj));
  4029b0:	bf 18 00 00 00       	mov    $0x18,%edi
  4029b5:	e8 c6 df ff ff       	callq  400980 <malloc@plt>
  4029ba:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
  res->obj_type = OBJ_TYPE;
  4029c1:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  4029c8:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
  switch(e->tag){
  4029ce:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4029d5:	8b 00                	mov    (%rax),%eax
  4029d7:	83 f8 0c             	cmp    $0xc,%eax
  4029da:	0f 87 eb 0c 00 00    	ja     4036cb <eval_exp+0xd53>
  4029e0:	89 c0                	mov    %eax,%eax
  4029e2:	48 8b 04 c5 40 41 40 	mov    0x404140(,%rax,8),%rax
  4029e9:	00 
  4029ea:	ff e0                	jmpq   *%rax
  case INT_EXP:{
    IntExp* e2 = (IntExp*)e;
  4029ec:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4029f3:	48 89 85 60 fe ff ff 	mov    %rax,-0x1a0(%rbp)
    res->tag = INT_TYPE;
  4029fa:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402a01:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%rax)
    res->value.num = make_int_obj(e2->value);
  402a08:	48 8b 85 60 fe ff ff 	mov    -0x1a0(%rbp),%rax
  402a0f:	8b 40 04             	mov    0x4(%rax),%eax
  402a12:	89 c7                	mov    %eax,%edi
  402a14:	e8 65 fa ff ff       	callq  40247e <make_int_obj>
  402a19:	48 89 c2             	mov    %rax,%rdx
  402a1c:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402a23:	48 89 50 10          	mov    %rdx,0x10(%rax)
    break;
  402a27:	e9 c3 0c 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case NULL_EXP:{
	res->tag = NULL_TYPE;
  402a2c:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402a33:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    res->value.null = make_null_obj();
  402a3a:	b8 00 00 00 00       	mov    $0x0,%eax
  402a3f:	e8 14 fa ff ff       	callq  402458 <make_null_obj>
  402a44:	48 89 c2             	mov    %rax,%rdx
  402a47:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402a4e:	48 89 50 10          	mov    %rdx,0x10(%rax)
    break;
  402a52:	e9 98 0c 00 00       	jmpq   4036ef <eval_exp+0xd77>
  402a57:	48 89 e0             	mov    %rsp,%rax
  402a5a:	48 89 c3             	mov    %rax,%rbx
  }
  case PRINTF_EXP:{
    PrintfExp* e2 = (PrintfExp*)e;
  402a5d:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  402a64:	48 89 85 68 fe ff ff 	mov    %rax,-0x198(%rbp)
    Obj* args[e2->nexps];
  402a6b:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  402a72:	8b 40 10             	mov    0x10(%rax),%eax
  402a75:	48 63 d0             	movslq %eax,%rdx
  402a78:	48 83 ea 01          	sub    $0x1,%rdx
  402a7c:	48 89 95 70 fe ff ff 	mov    %rdx,-0x190(%rbp)
  402a83:	48 63 d0             	movslq %eax,%rdx
  402a86:	49 89 d6             	mov    %rdx,%r14
  402a89:	41 bf 00 00 00 00    	mov    $0x0,%r15d
  402a8f:	48 63 d0             	movslq %eax,%rdx
  402a92:	49 89 d4             	mov    %rdx,%r12
  402a95:	41 bd 00 00 00 00    	mov    $0x0,%r13d
  402a9b:	48 98                	cltq   
  402a9d:	48 c1 e0 03          	shl    $0x3,%rax
  402aa1:	48 8d 50 07          	lea    0x7(%rax),%rdx
  402aa5:	b8 10 00 00 00       	mov    $0x10,%eax
  402aaa:	48 83 e8 01          	sub    $0x1,%rax
  402aae:	48 01 d0             	add    %rdx,%rax
  402ab1:	b9 10 00 00 00       	mov    $0x10,%ecx
  402ab6:	ba 00 00 00 00       	mov    $0x0,%edx
  402abb:	48 f7 f1             	div    %rcx
  402abe:	48 6b c0 10          	imul   $0x10,%rax,%rax
  402ac2:	48 29 c4             	sub    %rax,%rsp
  402ac5:	48 89 e0             	mov    %rsp,%rax
  402ac8:	48 83 c0 07          	add    $0x7,%rax
  402acc:	48 c1 e8 03          	shr    $0x3,%rax
  402ad0:	48 c1 e0 03          	shl    $0x3,%rax
  402ad4:	48 89 85 78 fe ff ff 	mov    %rax,-0x188(%rbp)
    
    for(int i=0; i<e2->nexps; i++){
  402adb:	c7 85 30 fe ff ff 00 	movl   $0x0,-0x1d0(%rbp)
  402ae2:	00 00 00 
  402ae5:	eb 55                	jmp    402b3c <eval_exp+0x1c4>
      /*printf(", ");
      print_exp(e2->exps[i]);*/
      /*evaluate the expression to semantic object*/
      args[i] = eval_exp(genv, env, e2->exps[i]);
  402ae7:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  402aee:	48 8b 40 18          	mov    0x18(%rax),%rax
  402af2:	8b 95 30 fe ff ff    	mov    -0x1d0(%rbp),%edx
  402af8:	48 63 d2             	movslq %edx,%rdx
  402afb:	48 c1 e2 03          	shl    $0x3,%rdx
  402aff:	48 01 d0             	add    %rdx,%rax
  402b02:	48 8b 10             	mov    (%rax),%rdx
  402b05:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  402b0c:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  402b13:	48 89 ce             	mov    %rcx,%rsi
  402b16:	48 89 c7             	mov    %rax,%rdi
  402b19:	e8 5a fe ff ff       	callq  402978 <eval_exp>
  402b1e:	48 89 c1             	mov    %rax,%rcx
  402b21:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  402b28:	8b 95 30 fe ff ff    	mov    -0x1d0(%rbp),%edx
  402b2e:	48 63 d2             	movslq %edx,%rdx
  402b31:	48 89 0c d0          	mov    %rcx,(%rax,%rdx,8)
  }
  case PRINTF_EXP:{
    PrintfExp* e2 = (PrintfExp*)e;
    Obj* args[e2->nexps];
    
    for(int i=0; i<e2->nexps; i++){
  402b35:	83 85 30 fe ff ff 01 	addl   $0x1,-0x1d0(%rbp)
  402b3c:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  402b43:	8b 40 10             	mov    0x10(%rax),%eax
  402b46:	3b 85 30 fe ff ff    	cmp    -0x1d0(%rbp),%eax
  402b4c:	7f 99                	jg     402ae7 <eval_exp+0x16f>
      /*printf(", ");
      print_exp(e2->exps[i]);*/
      /*evaluate the expression to semantic object*/
      args[i] = eval_exp(genv, env, e2->exps[i]);
    }
    size_t size = strlen(e2->format);
  402b4e:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  402b55:	48 8b 40 08          	mov    0x8(%rax),%rax
  402b59:	48 89 c7             	mov    %rax,%rdi
  402b5c:	e8 5f dd ff ff       	callq  4008c0 <strlen@plt>
  402b61:	48 89 85 80 fe ff ff 	mov    %rax,-0x180(%rbp)
    char* buf = malloc((size * sizeof(char))+1);
  402b68:	48 8b 85 80 fe ff ff 	mov    -0x180(%rbp),%rax
  402b6f:	48 83 c0 01          	add    $0x1,%rax
  402b73:	48 89 c7             	mov    %rax,%rdi
  402b76:	e8 05 de ff ff       	callq  400980 <malloc@plt>
  402b7b:	48 89 85 88 fe ff ff 	mov    %rax,-0x178(%rbp)
    memset(buf, '\0', sizeof(char)*size );
  402b82:	48 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%rdx
  402b89:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402b90:	be 00 00 00 00       	mov    $0x0,%esi
  402b95:	48 89 c7             	mov    %rax,%rdi
  402b98:	e8 63 dd ff ff       	callq  400900 <memset@plt>
    char* c = e2->format;
  402b9d:	48 8b 85 68 fe ff ff 	mov    -0x198(%rbp),%rax
  402ba4:	48 8b 40 08          	mov    0x8(%rax),%rax
  402ba8:	48 89 85 90 fe ff ff 	mov    %rax,-0x170(%rbp)
    /* iterate through char array*/
    int j,k ;
    for(int i=0,j=0, k=0 ; i<size; i++){
  402baf:	c7 85 34 fe ff ff 00 	movl   $0x0,-0x1cc(%rbp)
  402bb6:	00 00 00 
  402bb9:	c7 85 38 fe ff ff 00 	movl   $0x0,-0x1c8(%rbp)
  402bc0:	00 00 00 
  402bc3:	c7 85 3c fe ff ff 00 	movl   $0x0,-0x1c4(%rbp)
  402bca:	00 00 00 
  402bcd:	e9 cb 01 00 00       	jmpq   402d9d <eval_exp+0x425>
		/*if we reached a tilde stop and print arg*/
	    if(c[i] == '~'){
  402bd2:	8b 85 34 fe ff ff    	mov    -0x1cc(%rbp),%eax
  402bd8:	48 63 d0             	movslq %eax,%rdx
  402bdb:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  402be2:	48 01 d0             	add    %rdx,%rax
  402be5:	0f b6 00             	movzbl (%rax),%eax
  402be8:	3c 7e                	cmp    $0x7e,%al
  402bea:	0f 85 e2 00 00 00    	jne    402cd2 <eval_exp+0x35a>
			printf("%s",buf);
  402bf0:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402bf7:	48 89 c6             	mov    %rax,%rsi
  402bfa:	bf 88 40 40 00       	mov    $0x404088,%edi
  402bff:	b8 00 00 00 00       	mov    $0x0,%eax
  402c04:	e8 e7 dc ff ff       	callq  4008f0 <printf@plt>
			Obj* arg = args[j];
  402c09:	48 8b 85 78 fe ff ff 	mov    -0x188(%rbp),%rax
  402c10:	8b 95 38 fe ff ff    	mov    -0x1c8(%rbp),%edx
  402c16:	48 63 d2             	movslq %edx,%rdx
  402c19:	48 8b 04 d0          	mov    (%rax,%rdx,8),%rax
  402c1d:	48 89 85 98 fe ff ff 	mov    %rax,-0x168(%rbp)
			switch(arg->tag){
  402c24:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  402c2b:	8b 40 04             	mov    0x4(%rax),%eax
  402c2e:	83 f8 01             	cmp    $0x1,%eax
  402c31:	74 0c                	je     402c3f <eval_exp+0x2c7>
  402c33:	83 f8 01             	cmp    $0x1,%eax
  402c36:	72 34                	jb     402c6c <eval_exp+0x2f4>
  402c38:	83 f8 02             	cmp    $0x2,%eax
  402c3b:	74 63                	je     402ca0 <eval_exp+0x328>
  402c3d:	eb 3c                	jmp    402c7b <eval_exp+0x303>
				case INT_TYPE:{
					int num = arg->value.num->value;
  402c3f:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  402c46:	48 8b 40 10          	mov    0x10(%rax),%rax
  402c4a:	8b 40 04             	mov    0x4(%rax),%eax
  402c4d:	89 85 50 fe ff ff    	mov    %eax,-0x1b0(%rbp)
					printf("%d",num);
  402c53:	8b 85 50 fe ff ff    	mov    -0x1b0(%rbp),%eax
  402c59:	89 c6                	mov    %eax,%esi
  402c5b:	bf 8b 40 40 00       	mov    $0x40408b,%edi
  402c60:	b8 00 00 00 00       	mov    $0x0,%eax
  402c65:	e8 86 dc ff ff       	callq  4008f0 <printf@plt>
					break;					
  402c6a:	eb 35                	jmp    402ca1 <eval_exp+0x329>
				}
				case OBJ_TYPE:{
					break;
				}
				case NULL_TYPE:{
					printf("<null>");
  402c6c:	bf 8e 40 40 00       	mov    $0x40408e,%edi
  402c71:	b8 00 00 00 00       	mov    $0x0,%eax
  402c76:	e8 75 dc ff ff       	callq  4008f0 <printf@plt>
				}
				default:
                    printf("Unrecognized value with tag %d\n", arg->tag);
  402c7b:	48 8b 85 98 fe ff ff 	mov    -0x168(%rbp),%rax
  402c82:	8b 40 04             	mov    0x4(%rax),%eax
  402c85:	89 c6                	mov    %eax,%esi
  402c87:	bf 98 40 40 00       	mov    $0x404098,%edi
  402c8c:	b8 00 00 00 00       	mov    $0x0,%eax
  402c91:	e8 5a dc ff ff       	callq  4008f0 <printf@plt>
                    exit(-1);
  402c96:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  402c9b:	e8 00 dd ff ff       	callq  4009a0 <exit@plt>
					int num = arg->value.num->value;
					printf("%d",num);
					break;					
				}
				case OBJ_TYPE:{
					break;
  402ca0:	90                   	nop
				}
				default:
                    printf("Unrecognized value with tag %d\n", arg->tag);
                    exit(-1);
			}
			memset( buf, '\0', sizeof(char)*size );
  402ca1:	48 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%rdx
  402ca8:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402caf:	be 00 00 00 00       	mov    $0x0,%esi
  402cb4:	48 89 c7             	mov    %rax,%rdi
  402cb7:	e8 44 dc ff ff       	callq  400900 <memset@plt>
			j++; /*increment arg  index*/
  402cbc:	83 85 38 fe ff ff 01 	addl   $0x1,-0x1c8(%rbp)
			k=0; /*reset buffer index*/
  402cc3:	c7 85 3c fe ff ff 00 	movl   $0x0,-0x1c4(%rbp)
  402cca:	00 00 00 
  402ccd:	e9 c4 00 00 00       	jmpq   402d96 <eval_exp+0x41e>
		}
		else if (i == size-1) {
  402cd2:	8b 85 34 fe ff ff    	mov    -0x1cc(%rbp),%eax
  402cd8:	48 98                	cltq   
  402cda:	48 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%rdx
  402ce1:	48 83 ea 01          	sub    $0x1,%rdx
  402ce5:	48 39 d0             	cmp    %rdx,%rax
  402ce8:	75 7a                	jne    402d64 <eval_exp+0x3ec>
			buf[k] = c[i];
  402cea:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  402cf0:	48 63 d0             	movslq %eax,%rdx
  402cf3:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402cfa:	48 01 c2             	add    %rax,%rdx
  402cfd:	8b 85 34 fe ff ff    	mov    -0x1cc(%rbp),%eax
  402d03:	48 63 c8             	movslq %eax,%rcx
  402d06:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  402d0d:	48 01 c8             	add    %rcx,%rax
  402d10:	0f b6 00             	movzbl (%rax),%eax
  402d13:	88 02                	mov    %al,(%rdx)
			buf[k+1] = '\0';
  402d15:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  402d1b:	48 98                	cltq   
  402d1d:	48 8d 50 01          	lea    0x1(%rax),%rdx
  402d21:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402d28:	48 01 d0             	add    %rdx,%rax
  402d2b:	c6 00 00             	movb   $0x0,(%rax)
			printf("%s\n",buf);
  402d2e:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402d35:	48 89 c7             	mov    %rax,%rdi
  402d38:	e8 63 db ff ff       	callq  4008a0 <puts@plt>
			memset(buf, '\0', sizeof(char)*size );
  402d3d:	48 8b 95 80 fe ff ff 	mov    -0x180(%rbp),%rdx
  402d44:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402d4b:	be 00 00 00 00       	mov    $0x0,%esi
  402d50:	48 89 c7             	mov    %rax,%rdi
  402d53:	e8 a8 db ff ff       	callq  400900 <memset@plt>
			k=0;
  402d58:	c7 85 3c fe ff ff 00 	movl   $0x0,-0x1c4(%rbp)
  402d5f:	00 00 00 
  402d62:	eb 32                	jmp    402d96 <eval_exp+0x41e>
		}
		else{
		   buf[k]= c[i];
  402d64:	8b 85 3c fe ff ff    	mov    -0x1c4(%rbp),%eax
  402d6a:	48 63 d0             	movslq %eax,%rdx
  402d6d:	48 8b 85 88 fe ff ff 	mov    -0x178(%rbp),%rax
  402d74:	48 01 c2             	add    %rax,%rdx
  402d77:	8b 85 34 fe ff ff    	mov    -0x1cc(%rbp),%eax
  402d7d:	48 63 c8             	movslq %eax,%rcx
  402d80:	48 8b 85 90 fe ff ff 	mov    -0x170(%rbp),%rax
  402d87:	48 01 c8             	add    %rcx,%rax
  402d8a:	0f b6 00             	movzbl (%rax),%eax
  402d8d:	88 02                	mov    %al,(%rdx)
		   k++ ;
  402d8f:	83 85 3c fe ff ff 01 	addl   $0x1,-0x1c4(%rbp)
    char* buf = malloc((size * sizeof(char))+1);
    memset(buf, '\0', sizeof(char)*size );
    char* c = e2->format;
    /* iterate through char array*/
    int j,k ;
    for(int i=0,j=0, k=0 ; i<size; i++){
  402d96:	83 85 34 fe ff ff 01 	addl   $0x1,-0x1cc(%rbp)
  402d9d:	8b 85 34 fe ff ff    	mov    -0x1cc(%rbp),%eax
  402da3:	48 98                	cltq   
  402da5:	48 3b 85 80 fe ff ff 	cmp    -0x180(%rbp),%rax
  402dac:	0f 82 20 fe ff ff    	jb     402bd2 <eval_exp+0x25a>
		else{
		   buf[k]= c[i];
		   k++ ;
	   }
	}
    res->tag = NULL_TYPE;
  402db2:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402db9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%rax)
    res->value.null = make_null_obj();
  402dc0:	b8 00 00 00 00       	mov    $0x0,%eax
  402dc5:	e8 8e f6 ff ff       	callq  402458 <make_null_obj>
  402dca:	48 89 c2             	mov    %rax,%rdx
  402dcd:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402dd4:	48 89 50 10          	mov    %rdx,0x10(%rax)
    break;
  402dd8:	90                   	nop
  402dd9:	48 89 dc             	mov    %rbx,%rsp
  402ddc:	e9 0e 09 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case ARRAY_EXP:{
    ArrayExp* e2 = (ArrayExp*)e;
  402de1:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  402de8:	48 89 85 a0 fe ff ff 	mov    %rax,-0x160(%rbp)
    int len = eval_exp(genv, env, e2->length)->value.num->value;
  402def:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  402df6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  402dfa:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  402e01:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  402e08:	48 89 ce             	mov    %rcx,%rsi
  402e0b:	48 89 c7             	mov    %rax,%rdi
  402e0e:	e8 65 fb ff ff       	callq  402978 <eval_exp>
  402e13:	48 8b 40 10          	mov    0x10(%rax),%rax
  402e17:	8b 40 04             	mov    0x4(%rax),%eax
  402e1a:	89 85 54 fe ff ff    	mov    %eax,-0x1ac(%rbp)
    Obj* init_val = eval_exp(genv, env, e2->init);
  402e20:	48 8b 85 a0 fe ff ff 	mov    -0x160(%rbp),%rax
  402e27:	48 8b 50 10          	mov    0x10(%rax),%rdx
  402e2b:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  402e32:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  402e39:	48 89 ce             	mov    %rcx,%rsi
  402e3c:	48 89 c7             	mov    %rax,%rdi
  402e3f:	e8 34 fb ff ff       	callq  402978 <eval_exp>
  402e44:	48 89 85 a8 fe ff ff 	mov    %rax,-0x158(%rbp)
    ArrayObj* a = make_array_obj(len);
  402e4b:	8b 85 54 fe ff ff    	mov    -0x1ac(%rbp),%eax
  402e51:	89 c7                	mov    %eax,%edi
  402e53:	e8 eb f8 ff ff       	callq  402743 <make_array_obj>
  402e58:	48 89 85 b0 fe ff ff 	mov    %rax,-0x150(%rbp)
    for (int i=0; i < len; i++){
  402e5f:	c7 85 40 fe ff ff 00 	movl   $0x0,-0x1c0(%rbp)
  402e66:	00 00 00 
  402e69:	eb 5d                	jmp    402ec8 <eval_exp+0x550>
		a->elems[i] = (Obj*) malloc(sizeof(Obj));
  402e6b:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  402e72:	48 8b 40 08          	mov    0x8(%rax),%rax
  402e76:	8b 95 40 fe ff ff    	mov    -0x1c0(%rbp),%edx
  402e7c:	48 63 d2             	movslq %edx,%rdx
  402e7f:	48 c1 e2 03          	shl    $0x3,%rdx
  402e83:	48 8d 1c 10          	lea    (%rax,%rdx,1),%rbx
  402e87:	bf 18 00 00 00       	mov    $0x18,%edi
  402e8c:	e8 ef da ff ff       	callq  400980 <malloc@plt>
  402e91:	48 89 03             	mov    %rax,(%rbx)
		a->elems[i]->value = init_val->value;
  402e94:	48 8b 85 b0 fe ff ff 	mov    -0x150(%rbp),%rax
  402e9b:	48 8b 40 08          	mov    0x8(%rax),%rax
  402e9f:	8b 95 40 fe ff ff    	mov    -0x1c0(%rbp),%edx
  402ea5:	48 63 d2             	movslq %edx,%rdx
  402ea8:	48 c1 e2 03          	shl    $0x3,%rdx
  402eac:	48 01 d0             	add    %rdx,%rax
  402eaf:	48 8b 00             	mov    (%rax),%rax
  402eb2:	48 8b 95 a8 fe ff ff 	mov    -0x158(%rbp),%rdx
  402eb9:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  402ebd:	48 89 50 10          	mov    %rdx,0x10(%rax)
  case ARRAY_EXP:{
    ArrayExp* e2 = (ArrayExp*)e;
    int len = eval_exp(genv, env, e2->length)->value.num->value;
    Obj* init_val = eval_exp(genv, env, e2->init);
    ArrayObj* a = make_array_obj(len);
    for (int i=0; i < len; i++){
  402ec1:	83 85 40 fe ff ff 01 	addl   $0x1,-0x1c0(%rbp)
  402ec8:	8b 85 40 fe ff ff    	mov    -0x1c0(%rbp),%eax
  402ece:	3b 85 54 fe ff ff    	cmp    -0x1ac(%rbp),%eax
  402ed4:	7c 95                	jl     402e6b <eval_exp+0x4f3>
		a->elems[i] = (Obj*) malloc(sizeof(Obj));
		a->elems[i]->value = init_val->value;
	}
	
	res->tag = ARRAY_TYPE;
  402ed6:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402edd:	c7 40 04 03 00 00 00 	movl   $0x3,0x4(%rax)
	res->value.arr = a;
  402ee4:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  402eeb:	48 8b 95 b0 fe ff ff 	mov    -0x150(%rbp),%rdx
  402ef2:	48 89 50 10          	mov    %rdx,0x10(%rax)
    /*printf("array(");
    print_exp(e2->length);
    printf(", ");
    print_exp(e2->init);
    printf(")");*/
    break;
  402ef6:	e9 f4 07 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case OBJECT_EXP:{
    ObjectExp* e2 = (ObjectExp*)e;
  402efb:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  402f02:	48 89 85 b8 fe ff ff 	mov    %rax,-0x148(%rbp)
    Obj* o  =  (Obj*) malloc(sizeof(Obj));
  402f09:	bf 18 00 00 00       	mov    $0x18,%edi
  402f0e:	e8 6d da ff ff       	callq  400980 <malloc@plt>
  402f13:	48 89 85 c0 fe ff ff 	mov    %rax,-0x140(%rbp)
    Obj* p = eval_exp(genv, env, e2->parent);
  402f1a:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  402f21:	48 8b 50 08          	mov    0x8(%rax),%rdx
  402f25:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  402f2c:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  402f33:	48 89 ce             	mov    %rcx,%rsi
  402f36:	48 89 c7             	mov    %rax,%rdi
  402f39:	e8 3a fa ff ff       	callq  402978 <eval_exp>
  402f3e:	48 89 85 c8 fe ff ff 	mov    %rax,-0x138(%rbp)

    EnvObj* objenv = make_env_obj(p);
  402f45:	48 8b 85 c8 fe ff ff 	mov    -0x138(%rbp),%rax
  402f4c:	48 89 c7             	mov    %rax,%rdi
  402f4f:	e8 c2 f8 ff ff       	callq  402816 <make_env_obj>
  402f54:	48 89 85 d0 fe ff ff 	mov    %rax,-0x130(%rbp)
    for(int i=0; i< e2->nslots; i++){
  402f5b:	c7 85 44 fe ff ff 00 	movl   $0x0,-0x1bc(%rbp)
  402f62:	00 00 00 
  402f65:	e9 ec 00 00 00       	jmpq   403056 <eval_exp+0x6de>
	  Obj* obj = eval_stmt(genv, env, e2->slots[i]);
  402f6a:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  402f71:	48 8b 40 18          	mov    0x18(%rax),%rax
  402f75:	8b 95 44 fe ff ff    	mov    -0x1bc(%rbp),%edx
  402f7b:	48 63 d2             	movslq %edx,%rdx
  402f7e:	48 c1 e2 03          	shl    $0x3,%rdx
  402f82:	48 01 d0             	add    %rdx,%rax
  402f85:	48 8b 10             	mov    (%rax),%rdx
  402f88:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  402f8f:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  402f96:	48 89 ce             	mov    %rcx,%rsi
  402f99:	48 89 c7             	mov    %rax,%rdi
  402f9c:	e8 c3 09 00 00       	callq  403964 <eval_stmt>
  402fa1:	48 89 85 d8 fe ff ff 	mov    %rax,-0x128(%rbp)
	  if(obj->tag == DATA){
  402fa8:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  402faf:	8b 40 04             	mov    0x4(%rax),%eax
  402fb2:	83 f8 07             	cmp    $0x7,%eax
  402fb5:	75 41                	jne    402ff8 <eval_exp+0x680>
		Entry* ent = make_entry(DATA, obj);
  402fb7:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  402fbe:	48 89 c6             	mov    %rax,%rsi
  402fc1:	bf 07 00 00 00       	mov    $0x7,%edi
  402fc6:	e8 75 f9 ff ff       	callq  402940 <make_entry>
  402fcb:	48 89 85 e0 fe ff ff 	mov    %rax,-0x120(%rbp)
		add_entry(objenv,obj->name, ent);
  402fd2:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  402fd9:	48 8b 48 08          	mov    0x8(%rax),%rcx
  402fdd:	48 8b 95 e0 fe ff ff 	mov    -0x120(%rbp),%rdx
  402fe4:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  402feb:	48 89 ce             	mov    %rcx,%rsi
  402fee:	48 89 c7             	mov    %rax,%rdi
  402ff1:	e8 56 f8 ff ff       	callq  40284c <add_entry>
  402ff6:	eb 57                	jmp    40304f <eval_exp+0x6d7>
	  }else{
		obj->value.code->nargs = e2->nslots; /* add num of args to codeval*/
  402ff8:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  402fff:	48 8b 40 10          	mov    0x10(%rax),%rax
  403003:	48 8b 95 b8 fe ff ff 	mov    -0x148(%rbp),%rdx
  40300a:	8b 52 10             	mov    0x10(%rdx),%edx
  40300d:	89 50 10             	mov    %edx,0x10(%rax)
		Entry* ent = make_entry(CODE, obj); 
  403010:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  403017:	48 89 c6             	mov    %rax,%rsi
  40301a:	bf 06 00 00 00       	mov    $0x6,%edi
  40301f:	e8 1c f9 ff ff       	callq  402940 <make_entry>
  403024:	48 89 85 e8 fe ff ff 	mov    %rax,-0x118(%rbp)
		add_entry(objenv, obj->name, ent);
  40302b:	48 8b 85 d8 fe ff ff 	mov    -0x128(%rbp),%rax
  403032:	48 8b 48 08          	mov    0x8(%rax),%rcx
  403036:	48 8b 95 e8 fe ff ff 	mov    -0x118(%rbp),%rdx
  40303d:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403044:	48 89 ce             	mov    %rcx,%rsi
  403047:	48 89 c7             	mov    %rax,%rdi
  40304a:	e8 fd f7 ff ff       	callq  40284c <add_entry>
    ObjectExp* e2 = (ObjectExp*)e;
    Obj* o  =  (Obj*) malloc(sizeof(Obj));
    Obj* p = eval_exp(genv, env, e2->parent);

    EnvObj* objenv = make_env_obj(p);
    for(int i=0; i< e2->nslots; i++){
  40304f:	83 85 44 fe ff ff 01 	addl   $0x1,-0x1bc(%rbp)
  403056:	48 8b 85 b8 fe ff ff 	mov    -0x148(%rbp),%rax
  40305d:	8b 40 10             	mov    0x10(%rax),%eax
  403060:	3b 85 44 fe ff ff    	cmp    -0x1bc(%rbp),%eax
  403066:	0f 8f fe fe ff ff    	jg     402f6a <eval_exp+0x5f2>
		Entry* ent = make_entry(CODE, obj); 
		add_entry(objenv, obj->name, ent);
	  }
    }
    
    Obj* raw_object = make_var_object("", ENV_OBJ, objenv); 
  40306c:	48 8b 85 d0 fe ff ff 	mov    -0x130(%rbp),%rax
  403073:	48 89 c2             	mov    %rax,%rdx
  403076:	be 04 00 00 00       	mov    $0x4,%esi
  40307b:	bf b8 40 40 00       	mov    $0x4040b8,%edi
  403080:	e8 92 f5 ff ff       	callq  402617 <make_var_object>
  403085:	48 89 85 f0 fe ff ff 	mov    %rax,-0x110(%rbp)
    res->tag = ENV_OBJ;
  40308c:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  403093:	c7 40 04 04 00 00 00 	movl   $0x4,0x4(%rax)
    res = raw_object;
  40309a:	48 8b 85 f0 fe ff ff 	mov    -0x110(%rbp),%rax
  4030a1:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    
    break;
  4030a8:	e9 42 06 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case SLOT_EXP:{
    SlotExp* e2 = (SlotExp*)e;
  4030ad:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4030b4:	48 89 85 f8 fe ff ff 	mov    %rax,-0x108(%rbp)
    res = eval_exp(genv, env, e2->exp);
  4030bb:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  4030c2:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4030c6:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  4030cd:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4030d4:	48 89 ce             	mov    %rcx,%rsi
  4030d7:	48 89 c7             	mov    %rax,%rdi
  4030da:	e8 99 f8 ff ff       	callq  402978 <eval_exp>
  4030df:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    res->name = e2->name;
  4030e6:	48 8b 85 f8 fe ff ff 	mov    -0x108(%rbp),%rax
  4030ed:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4030f1:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
  4030f8:	48 89 50 08          	mov    %rdx,0x8(%rax)
    break;
  4030fc:	e9 ee 05 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case SET_SLOT_EXP:{
    SetSlotExp* e2 = (SetSlotExp*)e;
  403101:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  403108:	48 89 85 00 ff ff ff 	mov    %rax,-0x100(%rbp)
    Obj* object_ref = eval_exp(genv, env, e2->exp);
  40310f:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  403116:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40311a:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  403121:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  403128:	48 89 ce             	mov    %rcx,%rsi
  40312b:	48 89 c7             	mov    %rax,%rdi
  40312e:	e8 45 f8 ff ff       	callq  402978 <eval_exp>
  403133:	48 89 85 08 ff ff ff 	mov    %rax,-0xf8(%rbp)
    Obj* slot_ref = get_entry(object_ref->value.env, e2->name)->object;
  40313a:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  403141:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403145:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  40314c:	48 8b 40 10          	mov    0x10(%rax),%rax
  403150:	48 89 d6             	mov    %rdx,%rsi
  403153:	48 89 c7             	mov    %rax,%rdi
  403156:	e8 7a f7 ff ff       	callq  4028d5 <get_entry>
  40315b:	48 8b 40 08          	mov    0x8(%rax),%rax
  40315f:	48 89 85 10 ff ff ff 	mov    %rax,-0xf0(%rbp)
    Obj* value = eval_exp(genv, object_ref->value.env, e2->value);
  403166:	48 8b 85 00 ff ff ff 	mov    -0x100(%rbp),%rax
  40316d:	48 8b 50 18          	mov    0x18(%rax),%rdx
  403171:	48 8b 85 08 ff ff ff 	mov    -0xf8(%rbp),%rax
  403178:	48 8b 48 10          	mov    0x10(%rax),%rcx
  40317c:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  403183:	48 89 ce             	mov    %rcx,%rsi
  403186:	48 89 c7             	mov    %rax,%rdi
  403189:	e8 ea f7 ff ff       	callq  402978 <eval_exp>
  40318e:	48 89 85 18 ff ff ff 	mov    %rax,-0xe8(%rbp)
    slot_ref->tag = value->tag;
  403195:	48 8b 85 18 ff ff ff 	mov    -0xe8(%rbp),%rax
  40319c:	8b 50 04             	mov    0x4(%rax),%edx
  40319f:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4031a6:	89 50 04             	mov    %edx,0x4(%rax)
    slot_ref->value = value->value;
  4031a9:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4031b0:	48 8b 95 18 ff ff ff 	mov    -0xe8(%rbp),%rdx
  4031b7:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  4031bb:	48 89 50 10          	mov    %rdx,0x10(%rax)
		 break;
	   default:
          printf("Unrecognized object with tag %d\n", tag);
          exit(-1);
	}*/
    res = slot_ref;
  4031bf:	48 8b 85 10 ff ff ff 	mov    -0xf0(%rbp),%rax
  4031c6:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    break;
  4031cd:	e9 1d 05 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case CALL_SLOT_EXP:{
    CallSlotExp* e2 = (CallSlotExp*)e;
  4031d2:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4031d9:	48 89 85 20 ff ff ff 	mov    %rax,-0xe0(%rbp)
    Obj* object_ref = eval_exp(genv, env, e2->exp);
  4031e0:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  4031e7:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4031eb:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  4031f2:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4031f9:	48 89 ce             	mov    %rcx,%rsi
  4031fc:	48 89 c7             	mov    %rax,%rdi
  4031ff:	e8 74 f7 ff ff       	callq  402978 <eval_exp>
  403204:	48 89 85 28 ff ff ff 	mov    %rax,-0xd8(%rbp)
    Obj* fn_ref = get_entry_obj(object_ref->value.env, e2->name);
  40320b:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  403212:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403216:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  40321d:	48 8b 40 10          	mov    0x10(%rax),%rax
  403221:	48 89 d6             	mov    %rdx,%rsi
  403224:	48 89 c7             	mov    %rax,%rdi
  403227:	e8 a9 f6 ff ff       	callq  4028d5 <get_entry>
  40322c:	48 8b 40 08          	mov    0x8(%rax),%rax
  403230:	48 89 85 30 ff ff ff 	mov    %rax,-0xd0(%rbp)
    Obj* parent = make_var_object("", ENV_OBJ, genv);
  403237:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  40323e:	48 89 c2             	mov    %rax,%rdx
  403241:	be 04 00 00 00       	mov    $0x4,%esi
  403246:	bf b8 40 40 00       	mov    $0x4040b8,%edi
  40324b:	e8 c7 f3 ff ff       	callq  402617 <make_var_object>
  403250:	48 89 85 38 ff ff ff 	mov    %rax,-0xc8(%rbp)
    EnvObj* nenv = make_env_obj(parent);
  403257:	48 8b 85 38 ff ff ff 	mov    -0xc8(%rbp),%rax
  40325e:	48 89 c7             	mov    %rax,%rdi
  403261:	e8 b0 f5 ff ff       	callq  402816 <make_env_obj>
  403266:	48 89 85 40 ff ff ff 	mov    %rax,-0xc0(%rbp)
    if(e2->nargs != fn_ref->value.code->nargs){
  40326d:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  403274:	8b 50 18             	mov    0x18(%rax),%edx
  403277:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40327e:	48 8b 40 10          	mov    0x10(%rax),%rax
  403282:	8b 40 10             	mov    0x10(%rax),%eax
  403285:	39 c2                	cmp    %eax,%edx
  403287:	74 27                	je     4032b0 <eval_exp+0x938>
	    printf("method %s called with wrong number of args \n",e2->name);
  403289:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  403290:	48 8b 40 08          	mov    0x8(%rax),%rax
  403294:	48 89 c6             	mov    %rax,%rsi
  403297:	bf c0 40 40 00       	mov    $0x4040c0,%edi
  40329c:	b8 00 00 00 00       	mov    $0x0,%eax
  4032a1:	e8 4a d6 ff ff       	callq  4008f0 <printf@plt>
	    exit(-1);
  4032a6:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4032ab:	e8 f0 d6 ff ff       	callq  4009a0 <exit@plt>
	}
		
	Entry* ent = make_entry(ENV_OBJ, object_ref);/*should be a var value*/
  4032b0:	48 8b 85 28 ff ff ff 	mov    -0xd8(%rbp),%rax
  4032b7:	48 89 c6             	mov    %rax,%rsi
  4032ba:	bf 04 00 00 00       	mov    $0x4,%edi
  4032bf:	e8 7c f6 ff ff       	callq  402940 <make_entry>
  4032c4:	48 89 85 48 ff ff ff 	mov    %rax,-0xb8(%rbp)
	add_entry(nenv, "this", ent);
  4032cb:	48 8b 95 48 ff ff ff 	mov    -0xb8(%rbp),%rdx
  4032d2:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  4032d9:	be ed 40 40 00       	mov    $0x4040ed,%esi
  4032de:	48 89 c7             	mov    %rax,%rdi
  4032e1:	e8 66 f5 ff ff       	callq  40284c <add_entry>
	for(int i=0; i<e2->nargs; i++){
  4032e6:	c7 85 48 fe ff ff 00 	movl   $0x0,-0x1b8(%rbp)
  4032ed:	00 00 00 
  4032f0:	e9 a2 00 00 00       	jmpq   403397 <eval_exp+0xa1f>
		Obj* method_arg = eval_exp(genv, env, e2->args[i]);
  4032f5:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  4032fc:	48 8b 40 20          	mov    0x20(%rax),%rax
  403300:	8b 95 48 fe ff ff    	mov    -0x1b8(%rbp),%edx
  403306:	48 63 d2             	movslq %edx,%rdx
  403309:	48 c1 e2 03          	shl    $0x3,%rdx
  40330d:	48 01 d0             	add    %rdx,%rax
  403310:	48 8b 10             	mov    (%rax),%rdx
  403313:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  40331a:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  403321:	48 89 ce             	mov    %rcx,%rsi
  403324:	48 89 c7             	mov    %rax,%rdi
  403327:	e8 4c f6 ff ff       	callq  402978 <eval_exp>
  40332c:	48 89 85 50 ff ff ff 	mov    %rax,-0xb0(%rbp)
		Entry* method_arg_entry = make_entry(method_arg->tag, method_arg);
  403333:	48 8b 85 50 ff ff ff 	mov    -0xb0(%rbp),%rax
  40333a:	8b 40 04             	mov    0x4(%rax),%eax
  40333d:	48 8b 95 50 ff ff ff 	mov    -0xb0(%rbp),%rdx
  403344:	48 89 d6             	mov    %rdx,%rsi
  403347:	89 c7                	mov    %eax,%edi
  403349:	e8 f2 f5 ff ff       	callq  402940 <make_entry>
  40334e:	48 89 85 58 ff ff ff 	mov    %rax,-0xa8(%rbp)
		add_entry(nenv, fn_ref->value.code->args[i], method_arg_entry);
  403355:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  40335c:	48 8b 40 10          	mov    0x10(%rax),%rax
  403360:	48 8b 40 08          	mov    0x8(%rax),%rax
  403364:	8b 95 48 fe ff ff    	mov    -0x1b8(%rbp),%edx
  40336a:	48 63 d2             	movslq %edx,%rdx
  40336d:	48 c1 e2 03          	shl    $0x3,%rdx
  403371:	48 01 d0             	add    %rdx,%rax
  403374:	48 8b 08             	mov    (%rax),%rcx
  403377:	48 8b 95 58 ff ff ff 	mov    -0xa8(%rbp),%rdx
  40337e:	48 8b 85 40 ff ff ff 	mov    -0xc0(%rbp),%rax
  403385:	48 89 ce             	mov    %rcx,%rsi
  403388:	48 89 c7             	mov    %rax,%rdi
  40338b:	e8 bc f4 ff ff       	callq  40284c <add_entry>
	    exit(-1);
	}
		
	Entry* ent = make_entry(ENV_OBJ, object_ref);/*should be a var value*/
	add_entry(nenv, "this", ent);
	for(int i=0; i<e2->nargs; i++){
  403390:	83 85 48 fe ff ff 01 	addl   $0x1,-0x1b8(%rbp)
  403397:	48 8b 85 20 ff ff ff 	mov    -0xe0(%rbp),%rax
  40339e:	8b 40 18             	mov    0x18(%rax),%eax
  4033a1:	3b 85 48 fe ff ff    	cmp    -0x1b8(%rbp),%eax
  4033a7:	0f 8f 48 ff ff ff    	jg     4032f5 <eval_exp+0x97d>
		Obj* method_arg = eval_exp(genv, env, e2->args[i]);
		Entry* method_arg_entry = make_entry(method_arg->tag, method_arg);
		add_entry(nenv, fn_ref->value.code->args[i], method_arg_entry);
	}
	res = eval_stmt(genv, nenv, fn_ref->value.code->stmt);
  4033ad:	48 8b 85 30 ff ff ff 	mov    -0xd0(%rbp),%rax
  4033b4:	48 8b 40 10          	mov    0x10(%rax),%rax
  4033b8:	48 8b 50 20          	mov    0x20(%rax),%rdx
  4033bc:	48 8b 8d 40 ff ff ff 	mov    -0xc0(%rbp),%rcx
  4033c3:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4033ca:	48 89 ce             	mov    %rcx,%rsi
  4033cd:	48 89 c7             	mov    %rax,%rdi
  4033d0:	e8 8f 05 00 00       	callq  403964 <eval_stmt>
  4033d5:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    for(int i=0; i<e2->nargs; i++){
      if(i > 0) printf(", ");
      print_exp(e2->args[i]);
    }
    printf(")");*/
    break;
  4033dc:	e9 0e 03 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case CALL_EXP:{
    CallExp* e2 = (CallExp*)e;
  4033e1:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4033e8:	48 89 85 60 ff ff ff 	mov    %rax,-0xa0(%rbp)
    Obj* fn = get_entry_obj(genv, e2->name);
  4033ef:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4033f6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4033fa:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  403401:	48 89 d6             	mov    %rdx,%rsi
  403404:	48 89 c7             	mov    %rax,%rdi
  403407:	e8 c9 f4 ff ff       	callq  4028d5 <get_entry>
  40340c:	48 8b 40 08          	mov    0x8(%rax),%rax
  403410:	48 89 85 68 ff ff ff 	mov    %rax,-0x98(%rbp)
    Obj* parent = make_var_object("", ENV_OBJ, genv);
  403417:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  40341e:	48 89 c2             	mov    %rax,%rdx
  403421:	be 04 00 00 00       	mov    $0x4,%esi
  403426:	bf b8 40 40 00       	mov    $0x4040b8,%edi
  40342b:	e8 e7 f1 ff ff       	callq  402617 <make_var_object>
  403430:	48 89 85 70 ff ff ff 	mov    %rax,-0x90(%rbp)
    EnvObj* nenv = make_env_obj(parent);
  403437:	48 8b 85 70 ff ff ff 	mov    -0x90(%rbp),%rax
  40343e:	48 89 c7             	mov    %rax,%rdi
  403441:	e8 d0 f3 ff ff       	callq  402816 <make_env_obj>
  403446:	48 89 85 78 ff ff ff 	mov    %rax,-0x88(%rbp)
    
    for(int i=0; i<e2->nargs; i++){
  40344d:	c7 85 4c fe ff ff 00 	movl   $0x0,-0x1b4(%rbp)
  403454:	00 00 00 
  403457:	e9 93 00 00 00       	jmpq   4034ef <eval_exp+0xb77>
       Obj* function_arg = eval_exp(genv, env, e2->args[i]);
  40345c:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  403463:	48 8b 40 18          	mov    0x18(%rax),%rax
  403467:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
  40346d:	48 63 d2             	movslq %edx,%rdx
  403470:	48 c1 e2 03          	shl    $0x3,%rdx
  403474:	48 01 d0             	add    %rdx,%rax
  403477:	48 8b 10             	mov    (%rax),%rdx
  40347a:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  403481:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  403488:	48 89 ce             	mov    %rcx,%rsi
  40348b:	48 89 c7             	mov    %rax,%rdi
  40348e:	e8 e5 f4 ff ff       	callq  402978 <eval_exp>
  403493:	48 89 45 80          	mov    %rax,-0x80(%rbp)
       Entry* function_arg_entry = make_entry(function_arg->tag, function_arg);
  403497:	48 8b 45 80          	mov    -0x80(%rbp),%rax
  40349b:	8b 40 04             	mov    0x4(%rax),%eax
  40349e:	48 8b 55 80          	mov    -0x80(%rbp),%rdx
  4034a2:	48 89 d6             	mov    %rdx,%rsi
  4034a5:	89 c7                	mov    %eax,%edi
  4034a7:	e8 94 f4 ff ff       	callq  402940 <make_entry>
  4034ac:	48 89 45 88          	mov    %rax,-0x78(%rbp)
	   add_entry(nenv, fn->value.code->args[i], function_arg_entry);
  4034b0:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  4034b7:	48 8b 40 10          	mov    0x10(%rax),%rax
  4034bb:	48 8b 40 08          	mov    0x8(%rax),%rax
  4034bf:	8b 95 4c fe ff ff    	mov    -0x1b4(%rbp),%edx
  4034c5:	48 63 d2             	movslq %edx,%rdx
  4034c8:	48 c1 e2 03          	shl    $0x3,%rdx
  4034cc:	48 01 d0             	add    %rdx,%rax
  4034cf:	48 8b 08             	mov    (%rax),%rcx
  4034d2:	48 8b 55 88          	mov    -0x78(%rbp),%rdx
  4034d6:	48 8b 85 78 ff ff ff 	mov    -0x88(%rbp),%rax
  4034dd:	48 89 ce             	mov    %rcx,%rsi
  4034e0:	48 89 c7             	mov    %rax,%rdi
  4034e3:	e8 64 f3 ff ff       	callq  40284c <add_entry>
    CallExp* e2 = (CallExp*)e;
    Obj* fn = get_entry_obj(genv, e2->name);
    Obj* parent = make_var_object("", ENV_OBJ, genv);
    EnvObj* nenv = make_env_obj(parent);
    
    for(int i=0; i<e2->nargs; i++){
  4034e8:	83 85 4c fe ff ff 01 	addl   $0x1,-0x1b4(%rbp)
  4034ef:	48 8b 85 60 ff ff ff 	mov    -0xa0(%rbp),%rax
  4034f6:	8b 40 10             	mov    0x10(%rax),%eax
  4034f9:	3b 85 4c fe ff ff    	cmp    -0x1b4(%rbp),%eax
  4034ff:	0f 8f 57 ff ff ff    	jg     40345c <eval_exp+0xae4>
       Obj* function_arg = eval_exp(genv, env, e2->args[i]);
       Entry* function_arg_entry = make_entry(function_arg->tag, function_arg);
	   add_entry(nenv, fn->value.code->args[i], function_arg_entry);
    }
    res = eval_stmt(genv, nenv, fn->value.code->stmt);
  403505:	48 8b 85 68 ff ff ff 	mov    -0x98(%rbp),%rax
  40350c:	48 8b 40 10          	mov    0x10(%rax),%rax
  403510:	48 8b 50 20          	mov    0x20(%rax),%rdx
  403514:	48 8b 8d 78 ff ff ff 	mov    -0x88(%rbp),%rcx
  40351b:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  403522:	48 89 ce             	mov    %rcx,%rsi
  403525:	48 89 c7             	mov    %rax,%rdi
  403528:	e8 37 04 00 00       	callq  403964 <eval_stmt>
  40352d:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)

    break;
  403534:	e9 b6 01 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case SET_EXP:{
    SetExp* e2 = (SetExp*)e;
  403539:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  403540:	48 89 45 90          	mov    %rax,-0x70(%rbp)
    printf("%s = ", e2->name);
  403544:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  403548:	48 8b 40 08          	mov    0x8(%rax),%rax
  40354c:	48 89 c6             	mov    %rax,%rsi
  40354f:	bf f2 40 40 00       	mov    $0x4040f2,%edi
  403554:	b8 00 00 00 00       	mov    $0x0,%eax
  403559:	e8 92 d3 ff ff       	callq  4008f0 <printf@plt>
    Obj* obj = get_entry_obj(env, e2->name);
  40355e:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  403562:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403566:	48 8b 85 20 fe ff ff 	mov    -0x1e0(%rbp),%rax
  40356d:	48 89 d6             	mov    %rdx,%rsi
  403570:	48 89 c7             	mov    %rax,%rdi
  403573:	e8 5d f3 ff ff       	callq  4028d5 <get_entry>
  403578:	48 8b 40 08          	mov    0x8(%rax),%rax
  40357c:	48 89 45 98          	mov    %rax,-0x68(%rbp)
    Obj* val = eval_exp(genv, env, e2->exp);
  403580:	48 8b 45 90          	mov    -0x70(%rbp),%rax
  403584:	48 8b 50 10          	mov    0x10(%rax),%rdx
  403588:	48 8b 8d 20 fe ff ff 	mov    -0x1e0(%rbp),%rcx
  40358f:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  403596:	48 89 ce             	mov    %rcx,%rsi
  403599:	48 89 c7             	mov    %rax,%rdi
  40359c:	e8 d7 f3 ff ff       	callq  402978 <eval_exp>
  4035a1:	48 89 45 a0          	mov    %rax,-0x60(%rbp)
    obj->value = val->value;
  4035a5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4035a9:	48 8b 55 a0          	mov    -0x60(%rbp),%rdx
  4035ad:	48 8b 52 10          	mov    0x10(%rdx),%rdx
  4035b1:	48 89 50 10          	mov    %rdx,0x10(%rax)
    res = obj;
  4035b5:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4035b9:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    break;
  4035c0:	e9 2a 01 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case IF_EXP:{
    IfExp* e2 = (IfExp*)e;
  4035c5:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4035cc:	48 89 45 a8          	mov    %rax,-0x58(%rbp)
    printf("if ");
  4035d0:	bf f8 40 40 00       	mov    $0x4040f8,%edi
  4035d5:	b8 00 00 00 00       	mov    $0x0,%eax
  4035da:	e8 11 d3 ff ff       	callq  4008f0 <printf@plt>
    print_exp(e2->pred);
  4035df:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4035e3:	48 8b 40 08          	mov    0x8(%rax),%rax
  4035e7:	48 89 c7             	mov    %rax,%rdi
  4035ea:	e8 2d df ff ff       	callq  40151c <print_exp>
    printf(" : (");
  4035ef:	bf fc 40 40 00       	mov    $0x4040fc,%edi
  4035f4:	b8 00 00 00 00       	mov    $0x0,%eax
  4035f9:	e8 f2 d2 ff ff       	callq  4008f0 <printf@plt>
    print_scopestmt(e2->conseq);
  4035fe:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403602:	48 8b 40 10          	mov    0x10(%rax),%rax
  403606:	48 89 c7             	mov    %rax,%rdi
  403609:	e8 a0 e4 ff ff       	callq  401aae <print_scopestmt>
    printf(") else : (");
  40360e:	bf 01 41 40 00       	mov    $0x404101,%edi
  403613:	b8 00 00 00 00       	mov    $0x0,%eax
  403618:	e8 d3 d2 ff ff       	callq  4008f0 <printf@plt>
    print_scopestmt(e2->alt);
  40361d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403621:	48 8b 40 18          	mov    0x18(%rax),%rax
  403625:	48 89 c7             	mov    %rax,%rdi
  403628:	e8 81 e4 ff ff       	callq  401aae <print_scopestmt>
    printf(")");
  40362d:	bf 29 00 00 00       	mov    $0x29,%edi
  403632:	e8 49 d2 ff ff       	callq  400880 <putchar@plt>
    break;
  403637:	e9 b3 00 00 00       	jmpq   4036ef <eval_exp+0xd77>
  }
  case WHILE_EXP:{
    WhileExp* e2 = (WhileExp*)e;
  40363c:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  403643:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    printf("while ");
  403647:	bf 0c 41 40 00       	mov    $0x40410c,%edi
  40364c:	b8 00 00 00 00       	mov    $0x0,%eax
  403651:	e8 9a d2 ff ff       	callq  4008f0 <printf@plt>
    print_exp(e2->pred);
  403656:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40365a:	48 8b 40 08          	mov    0x8(%rax),%rax
  40365e:	48 89 c7             	mov    %rax,%rdi
  403661:	e8 b6 de ff ff       	callq  40151c <print_exp>
    printf(" : (");
  403666:	bf fc 40 40 00       	mov    $0x4040fc,%edi
  40366b:	b8 00 00 00 00       	mov    $0x0,%eax
  403670:	e8 7b d2 ff ff       	callq  4008f0 <printf@plt>
    print_scopestmt(e2->body);
  403675:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403679:	48 8b 40 10          	mov    0x10(%rax),%rax
  40367d:	48 89 c7             	mov    %rax,%rdi
  403680:	e8 29 e4 ff ff       	callq  401aae <print_scopestmt>
    printf(")");
  403685:	bf 29 00 00 00       	mov    $0x29,%edi
  40368a:	e8 f1 d1 ff ff       	callq  400880 <putchar@plt>
    break;
  40368f:	eb 5e                	jmp    4036ef <eval_exp+0xd77>
  }
  case REF_EXP:{
    RefExp* e2 = (RefExp*)e;
  403691:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  403698:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Obj* o = get_entry_obj(genv, e2->name);
  40369c:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4036a0:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4036a4:	48 8b 85 28 fe ff ff 	mov    -0x1d8(%rbp),%rax
  4036ab:	48 89 d6             	mov    %rdx,%rsi
  4036ae:	48 89 c7             	mov    %rax,%rdi
  4036b1:	e8 1f f2 ff ff       	callq  4028d5 <get_entry>
  4036b6:	48 8b 40 08          	mov    0x8(%rax),%rax
  4036ba:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    res = o;
  4036be:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4036c2:	48 89 85 58 fe ff ff 	mov    %rax,-0x1a8(%rbp)
    /*make_var_object(e2->name, ENV_OBJ, o)
    printf("%s", e2->name);*/
    break;
  4036c9:	eb 24                	jmp    4036ef <eval_exp+0xd77>
  }
  default:
    printf("Unrecognized Expression with tag %d\n", e->tag);
  4036cb:	48 8b 85 18 fe ff ff 	mov    -0x1e8(%rbp),%rax
  4036d2:	8b 00                	mov    (%rax),%eax
  4036d4:	89 c6                	mov    %eax,%esi
  4036d6:	bf 18 41 40 00       	mov    $0x404118,%edi
  4036db:	b8 00 00 00 00       	mov    $0x0,%eax
  4036e0:	e8 0b d2 ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  4036e5:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4036ea:	e8 b1 d2 ff ff       	callq  4009a0 <exit@plt>
  }
  
  return res;
  4036ef:	48 8b 85 58 fe ff ff 	mov    -0x1a8(%rbp),%rax
}
  4036f6:	48 8b 5d c8          	mov    -0x38(%rbp),%rbx
  4036fa:	64 48 33 1c 25 28 00 	xor    %fs:0x28,%rbx
  403701:	00 00 
  403703:	74 05                	je     40370a <eval_exp+0xd92>
  403705:	e8 d6 d1 ff ff       	callq  4008e0 <__stack_chk_fail@plt>
  40370a:	48 8d 65 d8          	lea    -0x28(%rbp),%rsp
  40370e:	5b                   	pop    %rbx
  40370f:	41 5c                	pop    %r12
  403711:	41 5d                	pop    %r13
  403713:	41 5e                	pop    %r14
  403715:	41 5f                	pop    %r15
  403717:	5d                   	pop    %rbp
  403718:	c3                   	retq   

0000000000403719 <exec_stmt>:

void exec_stmt (EnvObj* genv, EnvObj* env, ScopeStmt* s ){
  403719:	55                   	push   %rbp
  40371a:	48 89 e5             	mov    %rsp,%rbp
  40371d:	48 83 ec 70          	sub    $0x70,%rsp
  403721:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  403725:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  403729:	48 89 55 98          	mov    %rdx,-0x68(%rbp)

  switch(s->tag){
  40372d:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403731:	8b 00                	mov    (%rax),%eax
  403733:	83 f8 0e             	cmp    $0xe,%eax
  403736:	0f 84 bd 00 00 00    	je     4037f9 <exec_stmt+0xe0>
  40373c:	83 f8 0f             	cmp    $0xf,%eax
  40373f:	0f 84 b4 01 00 00    	je     4038f9 <exec_stmt+0x1e0>
  403745:	83 f8 0d             	cmp    $0xd,%eax
  403748:	0f 85 f3 01 00 00    	jne    403941 <exec_stmt+0x228>
  case VAR_STMT:{
    ScopeVar* s2 = (ScopeVar*)s;
  40374e:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403752:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    Obj* obj = eval_exp(genv, env,s2->exp);
  403756:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  40375a:	48 8b 50 10          	mov    0x10(%rax),%rdx
  40375e:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  403762:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403766:	48 89 ce             	mov    %rcx,%rsi
  403769:	48 89 c7             	mov    %rax,%rdi
  40376c:	e8 07 f2 ff ff       	callq  402978 <eval_exp>
  403771:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Entry* entry = (Entry* ) malloc (sizeof(Entry)); 
  403775:	bf 10 00 00 00       	mov    $0x10,%edi
  40377a:	e8 01 d2 ff ff       	callq  400980 <malloc@plt>
  40377f:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    if(get_entry(env, s2->name)!= NULL){
  403783:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  403787:	48 8b 50 08          	mov    0x8(%rax),%rdx
  40378b:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  40378f:	48 89 d6             	mov    %rdx,%rsi
  403792:	48 89 c7             	mov    %rax,%rdi
  403795:	e8 3b f1 ff ff       	callq  4028d5 <get_entry>
  40379a:	48 85 c0             	test   %rax,%rax
  40379d:	74 24                	je     4037c3 <exec_stmt+0xaa>
		/*throw error*/
		printf("variable %s cannot be defined twice\n", s2->name);
  40379f:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4037a3:	48 8b 40 08          	mov    0x8(%rax),%rax
  4037a7:	48 89 c6             	mov    %rax,%rsi
  4037aa:	bf a8 41 40 00       	mov    $0x4041a8,%edi
  4037af:	b8 00 00 00 00       	mov    $0x0,%eax
  4037b4:	e8 37 d1 ff ff       	callq  4008f0 <printf@plt>
        exit(-1);
  4037b9:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  4037be:	e8 dd d1 ff ff       	callq  4009a0 <exit@plt>
	}
    entry->obj_type = DATA;
  4037c3:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4037c7:	c7 00 07 00 00 00    	movl   $0x7,(%rax)
    entry->object = obj;
  4037cd:	48 8b 45 c0          	mov    -0x40(%rbp),%rax
  4037d1:	48 8b 55 b8          	mov    -0x48(%rbp),%rdx
  4037d5:	48 89 50 08          	mov    %rdx,0x8(%rax)
    add_entry(env, s2->name, entry); 
  4037d9:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
  4037dd:	48 8b 48 08          	mov    0x8(%rax),%rcx
  4037e1:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  4037e5:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4037e9:	48 89 ce             	mov    %rcx,%rsi
  4037ec:	48 89 c7             	mov    %rax,%rdi
  4037ef:	e8 58 f0 ff ff       	callq  40284c <add_entry>
    break;
  4037f4:	e9 69 01 00 00       	jmpq   403962 <exec_stmt+0x249>
  }
  case FN_STMT:{
    ScopeFn* s2 = (ScopeFn*)s;
  4037f9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4037fd:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    if(get_entry(genv, s2->name)!= NULL){
  403801:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403805:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403809:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  40380d:	48 89 d6             	mov    %rdx,%rsi
  403810:	48 89 c7             	mov    %rax,%rdi
  403813:	e8 bd f0 ff ff       	callq  4028d5 <get_entry>
  403818:	48 85 c0             	test   %rax,%rax
  40381b:	74 24                	je     403841 <exec_stmt+0x128>
		/*throw error*/
		printf("variable %s cannot be defined twice\n", s2->name);
  40381d:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403821:	48 8b 40 08          	mov    0x8(%rax),%rax
  403825:	48 89 c6             	mov    %rax,%rsi
  403828:	bf a8 41 40 00       	mov    $0x4041a8,%edi
  40382d:	b8 00 00 00 00       	mov    $0x0,%eax
  403832:	e8 b9 d0 ff ff       	callq  4008f0 <printf@plt>
        exit(-1);
  403837:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40383c:	e8 5f d1 ff ff       	callq  4009a0 <exit@plt>
	}
    Entry* entry = (Entry* ) malloc (sizeof(Entry));
  403841:	bf 10 00 00 00       	mov    $0x10,%edi
  403846:	e8 35 d1 ff ff       	callq  400980 <malloc@plt>
  40384b:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    entry->obj_type = ENTRY;
  40384f:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403853:	c7 00 05 00 00 00    	movl   $0x5,(%rax)
    CodeEntry* code = (CodeEntry* ) malloc (sizeof(CodeEntry));
  403859:	bf 28 00 00 00       	mov    $0x28,%edi
  40385e:	e8 1d d1 ff ff       	callq  400980 <malloc@plt>
  403863:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    code->obj_type = CODE;
  403867:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40386b:	c7 00 06 00 00 00    	movl   $0x6,(%rax)
	
	code->args = s2->args;
  403871:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403875:	48 8b 50 18          	mov    0x18(%rax),%rdx
  403879:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40387d:	48 89 50 08          	mov    %rdx,0x8(%rax)
	code->stmt = s2->body;
  403881:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403885:	48 8b 50 20          	mov    0x20(%rax),%rdx
  403889:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  40388d:	48 89 50 20          	mov    %rdx,0x20(%rax)
	
	Obj* code_object = (Obj*) malloc (sizeof(Obj));
  403891:	bf 18 00 00 00       	mov    $0x18,%edi
  403896:	e8 e5 d0 ff ff       	callq  400980 <malloc@plt>
  40389b:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
	code_object->obj_type = OBJ_TYPE;
  40389f:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4038a3:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
	code_object->name = s2->name;
  4038a9:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4038ad:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4038b1:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4038b5:	48 89 50 08          	mov    %rdx,0x8(%rax)
	code_object->tag = CODE;
  4038b9:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4038bd:	c7 40 04 06 00 00 00 	movl   $0x6,0x4(%rax)
	code_object->value.code = code;
  4038c4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  4038c8:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  4038cc:	48 89 50 10          	mov    %rdx,0x10(%rax)
	
	entry->object  = code_object;
  4038d0:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  4038d4:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  4038d8:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	add_entry(env, s2->name, entry);
  4038dc:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  4038e0:	48 8b 48 08          	mov    0x8(%rax),%rcx
  4038e4:	48 8b 55 d0          	mov    -0x30(%rbp),%rdx
  4038e8:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4038ec:	48 89 ce             	mov    %rcx,%rsi
  4038ef:	48 89 c7             	mov    %rax,%rdi
  4038f2:	e8 55 ef ff ff       	callq  40284c <add_entry>
    break;
  4038f7:	eb 69                	jmp    403962 <exec_stmt+0x249>
  }
  case SEQ_STMT:{
    ScopeSeq* s2 = (ScopeSeq*)s;
  4038f9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4038fd:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
    Obj* ret1 = eval_stmt(genv, env, s2->a);
  403901:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403905:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403909:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40390d:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403911:	48 89 ce             	mov    %rcx,%rsi
  403914:	48 89 c7             	mov    %rax,%rdi
  403917:	e8 48 00 00 00       	callq  403964 <eval_stmt>
  40391c:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    Obj* ret2 = eval_stmt(genv, env, s2->b);
  403920:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403924:	48 8b 50 10          	mov    0x10(%rax),%rdx
  403928:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  40392c:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403930:	48 89 ce             	mov    %rcx,%rsi
  403933:	48 89 c7             	mov    %rax,%rdi
  403936:	e8 29 00 00 00       	callq  403964 <eval_stmt>
  40393b:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    break;
  40393f:	eb 21                	jmp    403962 <exec_stmt+0x249>
  }

  default:
    printf("Unrecognized scope statement with tag(exec_stmt) %d\n", s->tag);
  403941:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403945:	8b 00                	mov    (%rax),%eax
  403947:	89 c6                	mov    %eax,%esi
  403949:	bf d0 41 40 00       	mov    $0x4041d0,%edi
  40394e:	b8 00 00 00 00       	mov    $0x0,%eax
  403953:	e8 98 cf ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  403958:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  40395d:	e8 3e d0 ff ff       	callq  4009a0 <exit@plt>
  }

}
  403962:	c9                   	leaveq 
  403963:	c3                   	retq   

0000000000403964 <eval_stmt>:

Obj* eval_stmt (EnvObj* genv, EnvObj* env, ScopeStmt* s ){
  403964:	55                   	push   %rbp
  403965:	48 89 e5             	mov    %rsp,%rbp
  403968:	48 83 ec 70          	sub    $0x70,%rsp
  40396c:	48 89 7d a8          	mov    %rdi,-0x58(%rbp)
  403970:	48 89 75 a0          	mov    %rsi,-0x60(%rbp)
  403974:	48 89 55 98          	mov    %rdx,-0x68(%rbp)
  Obj* res;
  switch(s->tag){
  403978:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  40397c:	8b 00                	mov    (%rax),%eax
  40397e:	83 f8 0e             	cmp    $0xe,%eax
  403981:	0f 84 df 00 00 00    	je     403a66 <eval_stmt+0x102>
  403987:	83 f8 0e             	cmp    $0xe,%eax
  40398a:	77 0a                	ja     403996 <eval_stmt+0x32>
  40398c:	83 f8 0d             	cmp    $0xd,%eax
  40398f:	74 1c                	je     4039ad <eval_stmt+0x49>
  403991:	e9 4c 02 00 00       	jmpq   403be2 <eval_stmt+0x27e>
  403996:	83 f8 0f             	cmp    $0xf,%eax
  403999:	0f 84 d2 01 00 00    	je     403b71 <eval_stmt+0x20d>
  40399f:	83 f8 10             	cmp    $0x10,%eax
  4039a2:	0f 84 11 02 00 00    	je     403bb9 <eval_stmt+0x255>
  4039a8:	e9 35 02 00 00       	jmpq   403be2 <eval_stmt+0x27e>
    case VAR_STMT:{
    ScopeVar* s2 = (ScopeVar*)s;
  4039ad:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  4039b1:	48 89 45 b8          	mov    %rax,-0x48(%rbp)
    Obj* obj = eval_exp(genv, env,s2->exp);
  4039b5:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4039b9:	48 8b 50 10          	mov    0x10(%rax),%rdx
  4039bd:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  4039c1:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  4039c5:	48 89 ce             	mov    %rcx,%rsi
  4039c8:	48 89 c7             	mov    %rax,%rdi
  4039cb:	e8 a8 ef ff ff       	callq  402978 <eval_exp>
  4039d0:	48 89 45 c0          	mov    %rax,-0x40(%rbp)
    Entry* entry = (Entry* ) malloc (sizeof(Entry)); 
  4039d4:	bf 10 00 00 00       	mov    $0x10,%edi
  4039d9:	e8 a2 cf ff ff       	callq  400980 <malloc@plt>
  4039de:	48 89 45 c8          	mov    %rax,-0x38(%rbp)
    if(get_entry(env, s2->name)!= NULL){
  4039e2:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  4039e6:	48 8b 50 08          	mov    0x8(%rax),%rdx
  4039ea:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  4039ee:	48 89 d6             	mov    %rdx,%rsi
  4039f1:	48 89 c7             	mov    %rax,%rdi
  4039f4:	e8 dc ee ff ff       	callq  4028d5 <get_entry>
  4039f9:	48 85 c0             	test   %rax,%rax
  4039fc:	74 24                	je     403a22 <eval_stmt+0xbe>
		/*throw error*/
		printf("variable %s cannot be defined twice\n", s2->name);
  4039fe:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403a02:	48 8b 40 08          	mov    0x8(%rax),%rax
  403a06:	48 89 c6             	mov    %rax,%rsi
  403a09:	bf a8 41 40 00       	mov    $0x4041a8,%edi
  403a0e:	b8 00 00 00 00       	mov    $0x0,%eax
  403a13:	e8 d8 ce ff ff       	callq  4008f0 <printf@plt>
        exit(-1);
  403a18:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  403a1d:	e8 7e cf ff ff       	callq  4009a0 <exit@plt>
	}
    entry->obj_type = DATA;
  403a22:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403a26:	c7 00 07 00 00 00    	movl   $0x7,(%rax)
    entry->object = obj;
  403a2c:	48 8b 45 c8          	mov    -0x38(%rbp),%rax
  403a30:	48 8b 55 c0          	mov    -0x40(%rbp),%rdx
  403a34:	48 89 50 08          	mov    %rdx,0x8(%rax)
    add_entry(env, s2->name, entry); 
  403a38:	48 8b 45 b8          	mov    -0x48(%rbp),%rax
  403a3c:	48 8b 48 08          	mov    0x8(%rax),%rcx
  403a40:	48 8b 55 c8          	mov    -0x38(%rbp),%rdx
  403a44:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403a48:	48 89 ce             	mov    %rcx,%rsi
  403a4b:	48 89 c7             	mov    %rax,%rdi
  403a4e:	e8 f9 ed ff ff       	callq  40284c <add_entry>
    res = make_null_obj();
  403a53:	b8 00 00 00 00       	mov    $0x0,%eax
  403a58:	e8 fb e9 ff ff       	callq  402458 <make_null_obj>
  403a5d:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    break;
  403a61:	e9 9d 01 00 00       	jmpq   403c03 <eval_stmt+0x29f>
  }
  case FN_STMT:{
    ScopeFn* s2 = (ScopeFn*)s;
  403a66:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403a6a:	48 89 45 d0          	mov    %rax,-0x30(%rbp)
    if(get_entry(genv, s2->name)!= NULL){
  403a6e:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403a72:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403a76:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403a7a:	48 89 d6             	mov    %rdx,%rsi
  403a7d:	48 89 c7             	mov    %rax,%rdi
  403a80:	e8 50 ee ff ff       	callq  4028d5 <get_entry>
  403a85:	48 85 c0             	test   %rax,%rax
  403a88:	74 24                	je     403aae <eval_stmt+0x14a>
		/*throw error*/
		printf("variable %s cannot be defined twice\n", s2->name);
  403a8a:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403a8e:	48 8b 40 08          	mov    0x8(%rax),%rax
  403a92:	48 89 c6             	mov    %rax,%rsi
  403a95:	bf a8 41 40 00       	mov    $0x4041a8,%edi
  403a9a:	b8 00 00 00 00       	mov    $0x0,%eax
  403a9f:	e8 4c ce ff ff       	callq  4008f0 <printf@plt>
        exit(-1);
  403aa4:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  403aa9:	e8 f2 ce ff ff       	callq  4009a0 <exit@plt>
	}
    Entry* entry = (Entry* ) malloc (sizeof(Entry));
  403aae:	bf 10 00 00 00       	mov    $0x10,%edi
  403ab3:	e8 c8 ce ff ff       	callq  400980 <malloc@plt>
  403ab8:	48 89 45 d8          	mov    %rax,-0x28(%rbp)
    entry->obj_type = ENTRY;
  403abc:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403ac0:	c7 00 05 00 00 00    	movl   $0x5,(%rax)
    CodeEntry* code = (CodeEntry* ) malloc (sizeof(CodeEntry));
  403ac6:	bf 28 00 00 00       	mov    $0x28,%edi
  403acb:	e8 b0 ce ff ff       	callq  400980 <malloc@plt>
  403ad0:	48 89 45 e0          	mov    %rax,-0x20(%rbp)
    code->obj_type = CODE;
  403ad4:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403ad8:	c7 00 06 00 00 00    	movl   $0x6,(%rax)
	code->args = s2->args;
  403ade:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403ae2:	48 8b 50 18          	mov    0x18(%rax),%rdx
  403ae6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403aea:	48 89 50 08          	mov    %rdx,0x8(%rax)
	code->stmt = s2->body;
  403aee:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403af2:	48 8b 50 20          	mov    0x20(%rax),%rdx
  403af6:	48 8b 45 e0          	mov    -0x20(%rbp),%rax
  403afa:	48 89 50 20          	mov    %rdx,0x20(%rax)
	
	Obj* code_object = (Obj*) malloc (sizeof(Obj));
  403afe:	bf 18 00 00 00       	mov    $0x18,%edi
  403b03:	e8 78 ce ff ff       	callq  400980 <malloc@plt>
  403b08:	48 89 45 e8          	mov    %rax,-0x18(%rbp)
	code_object->obj_type = OBJ_TYPE;
  403b0c:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403b10:	c7 00 02 00 00 00    	movl   $0x2,(%rax)
	code_object->name = s2->name;
  403b16:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403b1a:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403b1e:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403b22:	48 89 50 08          	mov    %rdx,0x8(%rax)
	code_object->tag = CODE;
  403b26:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403b2a:	c7 40 04 06 00 00 00 	movl   $0x6,0x4(%rax)
	code_object->value.code = code;
  403b31:	48 8b 45 e8          	mov    -0x18(%rbp),%rax
  403b35:	48 8b 55 e0          	mov    -0x20(%rbp),%rdx
  403b39:	48 89 50 10          	mov    %rdx,0x10(%rax)
	
	entry->object  = code_object;
  403b3d:	48 8b 45 d8          	mov    -0x28(%rbp),%rax
  403b41:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403b45:	48 89 50 08          	mov    %rdx,0x8(%rax)
	
	add_entry(env, s2->name, entry);
  403b49:	48 8b 45 d0          	mov    -0x30(%rbp),%rax
  403b4d:	48 8b 48 08          	mov    0x8(%rax),%rcx
  403b51:	48 8b 55 d8          	mov    -0x28(%rbp),%rdx
  403b55:	48 8b 45 a0          	mov    -0x60(%rbp),%rax
  403b59:	48 89 ce             	mov    %rcx,%rsi
  403b5c:	48 89 c7             	mov    %rax,%rdi
  403b5f:	e8 e8 ec ff ff       	callq  40284c <add_entry>
	res = make_null_obj();
  403b64:	48 c7 45 b0 58 24 40 	movq   $0x402458,-0x50(%rbp)
  403b6b:	00 
    break;
  403b6c:	e9 92 00 00 00       	jmpq   403c03 <eval_stmt+0x29f>
  }
  case SEQ_STMT:{
    ScopeSeq* s2 = (ScopeSeq*)s;
  403b71:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403b75:	48 89 45 f0          	mov    %rax,-0x10(%rbp)
    res = eval_stmt(genv, env, s2->a);
  403b79:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403b7d:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403b81:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  403b85:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403b89:	48 89 ce             	mov    %rcx,%rsi
  403b8c:	48 89 c7             	mov    %rax,%rdi
  403b8f:	e8 d0 fd ff ff       	callq  403964 <eval_stmt>
  403b94:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    res = eval_stmt(genv, env, s2->b);
  403b98:	48 8b 45 f0          	mov    -0x10(%rbp),%rax
  403b9c:	48 8b 50 10          	mov    0x10(%rax),%rdx
  403ba0:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  403ba4:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403ba8:	48 89 ce             	mov    %rcx,%rsi
  403bab:	48 89 c7             	mov    %rax,%rdi
  403bae:	e8 b1 fd ff ff       	callq  403964 <eval_stmt>
  403bb3:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    break;
  403bb7:	eb 4a                	jmp    403c03 <eval_stmt+0x29f>
  }
  case EXP_STMT:{
    ScopeExp* s2 = (ScopeExp*)s;
  403bb9:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403bbd:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
    res = eval_exp(genv, env,s2->exp);
  403bc1:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403bc5:	48 8b 50 08          	mov    0x8(%rax),%rdx
  403bc9:	48 8b 4d a0          	mov    -0x60(%rbp),%rcx
  403bcd:	48 8b 45 a8          	mov    -0x58(%rbp),%rax
  403bd1:	48 89 ce             	mov    %rcx,%rsi
  403bd4:	48 89 c7             	mov    %rax,%rdi
  403bd7:	e8 9c ed ff ff       	callq  402978 <eval_exp>
  403bdc:	48 89 45 b0          	mov    %rax,-0x50(%rbp)
    break;
  403be0:	eb 21                	jmp    403c03 <eval_stmt+0x29f>
  }
  default:
    printf("Unrecognized scope statement with tag %d\n", s->tag);
  403be2:	48 8b 45 98          	mov    -0x68(%rbp),%rax
  403be6:	8b 00                	mov    (%rax),%eax
  403be8:	89 c6                	mov    %eax,%esi
  403bea:	bf 08 42 40 00       	mov    $0x404208,%edi
  403bef:	b8 00 00 00 00       	mov    $0x0,%eax
  403bf4:	e8 f7 cc ff ff       	callq  4008f0 <printf@plt>
    exit(-1);
  403bf9:	bf ff ff ff ff       	mov    $0xffffffff,%edi
  403bfe:	e8 9d cd ff ff       	callq  4009a0 <exit@plt>
  }
  return res;
  403c03:	48 8b 45 b0          	mov    -0x50(%rbp),%rax
}
  403c07:	c9                   	leaveq 
  403c08:	c3                   	retq   

0000000000403c09 <interpret>:


void interpret (ScopeStmt* stmt) {
  403c09:	55                   	push   %rbp
  403c0a:	48 89 e5             	mov    %rsp,%rbp
  403c0d:	48 83 ec 20          	sub    $0x20,%rsp
  403c11:	48 89 7d e8          	mov    %rdi,-0x18(%rbp)
  printf("Interpret program:\n");
  403c15:	bf 32 42 40 00       	mov    $0x404232,%edi
  403c1a:	e8 81 cc ff ff       	callq  4008a0 <puts@plt>
  
  EnvObj* genv = make_env_obj(NULL);
  403c1f:	bf 00 00 00 00       	mov    $0x0,%edi
  403c24:	e8 ed eb ff ff       	callq  402816 <make_env_obj>
  403c29:	48 89 45 f8          	mov    %rax,-0x8(%rbp)
  exec_stmt(genv, genv, stmt);
  403c2d:	48 8b 55 e8          	mov    -0x18(%rbp),%rdx
  403c31:	48 8b 4d f8          	mov    -0x8(%rbp),%rcx
  403c35:	48 8b 45 f8          	mov    -0x8(%rbp),%rax
  403c39:	48 89 ce             	mov    %rcx,%rsi
  403c3c:	48 89 c7             	mov    %rax,%rdi
  403c3f:	e8 d5 fa ff ff       	callq  403719 <exec_stmt>
  printf("\n");  
  403c44:	bf 0a 00 00 00       	mov    $0xa,%edi
  403c49:	e8 32 cc ff ff       	callq  400880 <putchar@plt>
}
  403c4e:	c9                   	leaveq 
  403c4f:	c3                   	retq   

0000000000403c50 <__libc_csu_init>:
  403c50:	41 57                	push   %r15
  403c52:	41 56                	push   %r14
  403c54:	41 89 ff             	mov    %edi,%r15d
  403c57:	41 55                	push   %r13
  403c59:	41 54                	push   %r12
  403c5b:	4c 8d 25 ae 21 20 00 	lea    0x2021ae(%rip),%r12        # 605e10 <__frame_dummy_init_array_entry>
  403c62:	55                   	push   %rbp
  403c63:	48 8d 2d ae 21 20 00 	lea    0x2021ae(%rip),%rbp        # 605e18 <__init_array_end>
  403c6a:	53                   	push   %rbx
  403c6b:	49 89 f6             	mov    %rsi,%r14
  403c6e:	49 89 d5             	mov    %rdx,%r13
  403c71:	31 db                	xor    %ebx,%ebx
  403c73:	4c 29 e5             	sub    %r12,%rbp
  403c76:	48 83 ec 08          	sub    $0x8,%rsp
  403c7a:	48 c1 fd 03          	sar    $0x3,%rbp
  403c7e:	e8 b5 cb ff ff       	callq  400838 <_init>
  403c83:	48 85 ed             	test   %rbp,%rbp
  403c86:	74 1e                	je     403ca6 <__libc_csu_init+0x56>
  403c88:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
  403c8f:	00 
  403c90:	4c 89 ea             	mov    %r13,%rdx
  403c93:	4c 89 f6             	mov    %r14,%rsi
  403c96:	44 89 ff             	mov    %r15d,%edi
  403c99:	41 ff 14 dc          	callq  *(%r12,%rbx,8)
  403c9d:	48 83 c3 01          	add    $0x1,%rbx
  403ca1:	48 39 eb             	cmp    %rbp,%rbx
  403ca4:	75 ea                	jne    403c90 <__libc_csu_init+0x40>
  403ca6:	48 83 c4 08          	add    $0x8,%rsp
  403caa:	5b                   	pop    %rbx
  403cab:	5d                   	pop    %rbp
  403cac:	41 5c                	pop    %r12
  403cae:	41 5d                	pop    %r13
  403cb0:	41 5e                	pop    %r14
  403cb2:	41 5f                	pop    %r15
  403cb4:	c3                   	retq   
  403cb5:	90                   	nop
  403cb6:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
  403cbd:	00 00 00 

0000000000403cc0 <__libc_csu_fini>:
  403cc0:	f3 c3                	repz retq 

Disassembly of section .fini:

0000000000403cc4 <_fini>:
  403cc4:	48 83 ec 08          	sub    $0x8,%rsp
  403cc8:	48 83 c4 08          	add    $0x8,%rsp
  403ccc:	c3                   	retq   
